<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Card.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Card.js" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;/**&#10; * Card-Komponente für die Anzeige von Spielkarten mit interaktiven Features&#10; */&#10;function Card({ card, onClick, selected, style = {} }) {&#10;  // Basis- und ausgewählte Styles&#10;  const baseStyle = {&#10;    border: '2px solid rgba(255,255,255,0.3)',&#10;    borderRadius: '16px',&#10;    padding: '8px',&#10;    margin: '8px',&#10;    cursor: onClick ? 'pointer' : 'default',&#10;    background: 'rgba(255,255,255,0.95)',&#10;    transition: 'all 0.3s ease',&#10;    boxShadow: '0 8px 16px rgba(0,0,0,0.15)',&#10;    backdropFilter: 'blur(10px)',&#10;    ...style&#10;  };&#10;  const selectedStyle = {&#10;    border: '4px solid #007bff',&#10;    background: 'linear-gradient(135deg, #e3f2fd, #bbdefb)',&#10;    boxShadow: '0 12px 24px rgba(0,123,255,0.3)'&#10;  };&#10;&#10;  // MouseOver/MouseOut Handler&#10;  const handleMouseOver = (e) =&gt; {&#10;    if (onClick) {&#10;      e.currentTarget.style.transform = 'scale(1.08) translateY(-4px)';&#10;      e.currentTarget.style.boxShadow = '0 16px 32px rgba(0,0,0,0.25)';&#10;    }&#10;  };&#10;  const handleMouseOut = (e) =&gt; {&#10;    if (onClick) {&#10;      e.currentTarget.style.transform = selected ? 'scale(1.05)' : 'scale(1)';&#10;      e.currentTarget.style.boxShadow = selected&#10;        ? '0 12px 24px rgba(0,123,255,0.3)'&#10;        : '0 8px 16px rgba(0,0,0,0.15)';&#10;    }&#10;  };&#10;&#10;  // Bild-Styles&#10;  const imgStyle = {&#10;    width: '250px',&#10;    height: '200px',&#10;    objectFit: 'cover',&#10;    borderRadius: '12px',&#10;    display: 'block',&#10;    filter: selected ? 'brightness(1.1) contrast(1.1)' : 'brightness(1)',&#10;    transition: 'filter 0.3s ease'&#10;  };&#10;&#10;  return (&#10;    &lt;div&#10;      onClick={onClick}&#10;      style={selected ? { ...baseStyle, ...selectedStyle } : baseStyle}&#10;      onMouseOver={handleMouseOver}&#10;      onMouseOut={handleMouseOut}&#10;    &gt;&#10;      &lt;img&#10;        src={`/${card.image}`}&#10;        alt={card.title || `Card ${card.id}`}&#10;        style={imgStyle}&#10;        onError={(e) =&gt; {&#10;          // Fallback-Bild falls das Kartenbild nicht geladen werden kann&#10;          e.target.src = `https://placehold.co/250x200/cccccc/666666?text=Card+${card.id}`;&#10;        }}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Card;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Card.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Card.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;/**&#10; * Card-Klasse für eine Dixit-Karte&#10; */&#10;class Card {&#10;    public int $id;&#10;    public string $title;&#10;    public string $image;&#10;&#10;    public function __construct(int $id, string $title, string $image) {&#10;        $this-&gt;id = $id;&#10;        $this-&gt;title = $title;&#10;        $this-&gt;image = $image;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/CardSelectionPhase.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/CardSelectionPhase.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;&#10;/**&#10; * CardSelectionPhase-Klasse für die Dixit-Kartenauswahl-Phase&#10; */&#10;class CardSelectionPhase {&#10;    /** @var array&lt;int, Card&gt; */&#10;    private array $selectedCards = [];&#10;&#10;    /**&#10;     * Spieler wählt eine Karte aus seiner Hand aus&#10;     */&#10;    public function selectCard(Player $player, Card $card): void {&#10;        $this-&gt;selectedCards[$player-&gt;id] = $card;&#10;    }&#10;&#10;    /**&#10;     * Gibt alle ausgewählten Karten zurück&#10;     */&#10;    public function getSelectedCards(): array {&#10;        return $this-&gt;selectedCards;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Game.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Game.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;require_once 'StorytellingPhase.php';&#10;require_once 'CardSelectionPhase.php';&#10;require_once 'VotingPhase.php';&#10;require_once 'ScoringPhase.php';&#10;&#10;class Game {&#10;    public string $gameId;&#10;    /** @var Player[] */&#10;    public array $players = [];&#10;    public int $storytellerIndex = 0;&#10;    public string $phase = 'waiting';&#10;    public array $selectedCards = [];&#10;    public array $votes = [];&#10;    public ?string $hint = null;&#10;    public ?int $storytellerCard = null;&#10;    public ?string $winner = null;&#10;    public array $mixedCards = [];&#10;    public string $state = 'waiting';&#10;&#10;    public function __construct(string $gameId, array $players) {&#10;        $this-&gt;gameId = $gameId;&#10;        $this-&gt;players = $players;&#10;    }&#10;&#10;    public function getState(): array {&#10;        return [&#10;            'gameId' =&gt; $this-&gt;gameId,&#10;            'players' =&gt; $this-&gt;players,&#10;            'storytellerIndex' =&gt; $this-&gt;storytellerIndex,&#10;            'phase' =&gt; $this-&gt;phase,&#10;            'selectedCards' =&gt; $this-&gt;selectedCards,&#10;            'votes' =&gt; $this-&gt;votes,&#10;            'hint' =&gt; $this-&gt;hint,&#10;            'storytellerCard' =&gt; $this-&gt;storytellerCard,&#10;            'winner' =&gt; $this-&gt;winner,&#10;            'mixedCards' =&gt; $this-&gt;mixedCards,&#10;            'state' =&gt; $this-&gt;state&#10;        ];&#10;    }&#10;&#10;    public function startGame(): void {&#10;        $this-&gt;phase = 'storytelling';&#10;        $this-&gt;state = 'playing';&#10;        $this-&gt;storytellerIndex = 0;&#10;    }&#10;&#10;    public function giveHint(string $playerName, int $cardId, string $hint): bool {&#10;        $storyteller = $this-&gt;players[$this-&gt;storytellerIndex] ?? null;&#10;        if ($storyteller &amp;&amp; $storyteller-&gt;name === $playerName) {&#10;            $this-&gt;hint = $hint;&#10;            $this-&gt;storytellerCard = $cardId;&#10;            $this-&gt;phase = 'selectCards';&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public function chooseCard(string $playerName, int $cardId): bool {&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;name === $playerName) {&#10;                $this-&gt;selectedCards[] = [&#10;                    'playerId' =&gt; $player-&gt;id,&#10;                    'cardId' =&gt; $cardId&#10;                ];&#10;                break;&#10;            }&#10;        }&#10;        // Wenn alle Spieler (außer Erzähler) gewählt haben, nächste Phase&#10;        if (count($this-&gt;selectedCards) &gt;= count($this-&gt;players) - 1) {&#10;            $this-&gt;phase = 'voting';&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public function vote(string $playerName, int $cardId): bool {&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;name === $playerName) {&#10;                // Spieler darf nicht für eigene Karte stimmen&#10;                $ownCard = array_filter($this-&gt;selectedCards, fn($sc) =&gt; $sc['playerId'] === $player-&gt;id &amp;&amp; $sc['cardId'] === $cardId);&#10;                if ($ownCard) return false;&#10;                $this-&gt;votes[] = [&#10;                    'playerId' =&gt; $player-&gt;id,&#10;                    'cardId' =&gt; $cardId&#10;                ];&#10;                break;&#10;            }&#10;        }&#10;        // Wenn alle Stimmen abgegeben, nächste Phase&#10;        if (count($this-&gt;votes) &gt;= count($this-&gt;players) - 1) {&#10;            $this-&gt;phase = 'reveal';&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public function nextRound(): void {&#10;        // Punkte berechnen&#10;        $scoring = new ScoringPhase();&#10;        $scoring-&gt;calculateScores($this-&gt;players, $this-&gt;storytellerCard, array_column($this-&gt;votes, 'cardId'));&#10;        // Erzähler wechseln&#10;        $this-&gt;storytellerIndex = ($this-&gt;storytellerIndex + 1) % count($this-&gt;players);&#10;        // Reset für neue Runde&#10;        $this-&gt;phase = 'storytelling';&#10;        $this-&gt;selectedCards = [];&#10;        $this-&gt;votes = [];&#10;        $this-&gt;hint = null;&#10;        $this-&gt;storytellerCard = null;&#10;    }&#10;&#10;    public function restart(): void {&#10;        foreach ($this-&gt;players as $player) {&#10;            $player-&gt;score = 0;&#10;        }&#10;        $this-&gt;phase = 'waiting';&#10;        $this-&gt;state = 'waiting';&#10;        $this-&gt;selectedCards = [];&#10;        $this-&gt;votes = [];&#10;        $this-&gt;hint = null;&#10;        $this-&gt;storytellerCard = null;&#10;        $this-&gt;winner = null;&#10;        $this-&gt;storytellerIndex = 0;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/GameLogic.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/GameLogic.php" />
              <option name="updatedContent" value="&lt;?php&#10;/**&#10; * Utility-Funktionen für die Spiellogik&#10; */&#10;&#10;/**&#10; * Mischt ein Array zufällig (Fisher-Yates Shuffle)&#10; * @param array $array - Das zu mischende Array&#10; * @return array Das gemischte Array&#10; */&#10;function shuffle_array($array) {&#10;    $shuffled = $array;&#10;    $count = count($shuffled);&#10;    for ($i = $count - 1; $i &gt; 0; $i--) {&#10;        $j = floor(mt_rand() / mt_getrandmax() * ($i + 1));&#10;        // Werte tauschen&#10;        $temp = $shuffled[$i];&#10;        $shuffled[$i] = $shuffled[$j];&#10;        $shuffled[$j] = $temp;&#10;    }&#10;    return $shuffled;&#10;}&#10;&#10;/**&#10; * Berechnet die Punkte am Ende einer Runde&#10; * @param array $game - Das Spielobjekt&#10; * @return array Die Punkteverteilung&#10; */&#10;function calculate_points($game) {&#10;    $storyteller_id = $game['selectedCards'][0]['playerId'];&#10;    $correct_card_id = $game['storytellerCard'];&#10;    $votes = $game['votes'];&#10;&#10;    // Zähle korrekte Stimmen&#10;    $correct_votes = 0;&#10;    foreach ($votes as $vote) {&#10;        if ($vote['cardId'] === $correct_card_id) {&#10;            $correct_votes++;&#10;        }&#10;    }&#10;    &#10;    $all_correct = $correct_votes === count($votes);&#10;    $none_correct = $correct_votes === 0;&#10;&#10;    // Punkte für den Erzähler&#10;    foreach ($game['players'] as &amp;$player) {&#10;        if ($player['id'] === $storyteller_id) {&#10;            if (!$none_correct &amp;&amp; !$all_correct) {&#10;                $player['points'] += 3;&#10;            }&#10;        }&#10;    }&#10;&#10;    // Punkte für richtige Stimmen&#10;    foreach ($votes as $vote) {&#10;        if ($vote['cardId'] === $correct_card_id) {&#10;            foreach ($game['players'] as &amp;$player) {&#10;                if ($player['id'] === $vote['playerId']) {&#10;                    $player['points'] += 3;&#10;                    break;&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Punkte für andere Spieler, die Stimmen für ihre Karten erhalten haben&#10;    foreach ($game['selectedCards'] as $selected_card) {&#10;        if ($selected_card['playerId'] !== $storyteller_id) {&#10;            // Zähle Stimmen für diese Karte&#10;            $votes_for_card = 0;&#10;            foreach ($votes as $vote) {&#10;                if ($vote['cardId'] === $selected_card['cardId']) {&#10;                    $votes_for_card++;&#10;                }&#10;            }&#10;            &#10;            // Füge Punkte hinzu&#10;            foreach ($game['players'] as &amp;$player) {&#10;                if ($player['id'] === $selected_card['playerId']) {&#10;                    $player['points'] += $votes_for_card;&#10;                    break;&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Erstelle Punkteverteilung&#10;    $points = [];&#10;    foreach ($game['players'] as $player) {&#10;        $points[] = [&#10;            'id' =&gt; $player['name'],&#10;            'points' =&gt; $player['points']&#10;        ];&#10;    }&#10;&#10;    return ['points' =&gt; $points];&#10;}&#10;&#10;/**&#10; * Validiert, ob ein Spielzustand gültig ist&#10; * @param array $game - Das zu validierende Spielobjekt&#10; * @return bool True wenn gültig, false sonst&#10; */&#10;function validate_game_state($game) {&#10;    if (empty($game) || empty($game['players']) || count($game['players']) &lt; 2) {&#10;        return false;&#10;    }&#10;&#10;    if ($game['storytellerIndex'] &lt; 0 || $game['storytellerIndex'] &gt;= count($game['players'])) {&#10;        return false;&#10;    }&#10;&#10;    return true;&#10;}&#10;?&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lobby.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lobby.js" />
              <option name="updatedContent" value="import React from 'react';&#10;import './LobbyStyle.css';&#10;&#10;function Lobby({ players, gameId, error, onJoin, onStart, onLeave }) {&#10;  return (&#10;    &lt;div className=&quot;lobby-container&quot;&gt;&#10;      &lt;h2&gt; Raum: {gameId}&lt;/h2&gt;&#10;      &lt;div className=&quot;lobby-players&quot;&gt;&#10;        &lt;h3&gt; Spieler ({players.length})&lt;/h3&gt;&#10;        &lt;div style={{ display: 'grid', gap: '12px', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}&gt;&#10;          {players.map((player, idx) =&gt; (&#10;            &lt;div key={player.id} className=&quot;lobby-player-card&quot;&gt;&#10;              &lt;div style={{ fontSize: '24px', marginBottom: '8px' }}&gt;&#10;                {idx === 0 ? '' : ''}&#10;              &lt;/div&gt;&#10;              &lt;div style={{ fontWeight: 'bold', fontSize: '16px' }}&gt;{player.name}&lt;/div&gt;&#10;              {idx === 0 &amp;&amp; &lt;div style={{ color: '#FFD700', fontSize: '12px', marginTop: '4px', fontWeight: 'bold' }}&gt;Raumleiter&lt;/div&gt;}&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      {error &amp;&amp; &lt;div className=&quot;lobby-error&quot;&gt;⚠️ {error}&lt;/div&gt;}&#10;      &lt;button className=&quot;lobby-btn&quot; onClick={onJoin}&gt; Raum beitreten&lt;/button&gt;&#10;      &lt;button className=&quot;lobby-btn&quot; onClick={onStart} disabled={players.length &lt; 3}&gt; Spiel starten!&lt;/button&gt;&#10;      &lt;button className=&quot;lobby-btn&quot; onClick={onLeave}&gt; Verlassen&lt;/button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Lobby;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lobby.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lobby.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;&#10;/**&#10; * Lobby-Klasse für die Verwaltung der Spiel-Lobby&#10; */&#10;class Lobby {&#10;    private string $gameId;&#10;    /** @var Player[] */&#10;    private array $players = [];&#10;    private string $state = 'waiting'; // 'waiting' oder 'playing'&#10;&#10;    public function __construct(string $gameId) {&#10;        $this-&gt;gameId = $gameId;&#10;    }&#10;&#10;    /**&#10;     * Spieler tritt der Lobby bei&#10;     */&#10;    public function joinLobby(Player $player): bool {&#10;        foreach ($this-&gt;players as $p) {&#10;            if ($p-&gt;name === $player-&gt;name) {&#10;                return false; // Name schon vergeben&#10;            }&#10;        }&#10;        $this-&gt;players[] = $player;&#10;        return true;&#10;    }&#10;&#10;    /**&#10;     * Spieler verlässt die Lobby&#10;     */&#10;    public function leaveLobby(string $playerName): void {&#10;        $this-&gt;players = array_filter($this-&gt;players, fn($p) =&gt; $p-&gt;name !== $playerName);&#10;    }&#10;&#10;    /**&#10;     * Gibt den aktuellen Lobby-Status zurück&#10;     */&#10;    public function getState(): array {&#10;        return [&#10;            'gameId' =&gt; $this-&gt;gameId,&#10;            'players' =&gt; array_map(fn($p) =&gt; ['id' =&gt; $p-&gt;id, 'name' =&gt; $p-&gt;name], $this-&gt;players),&#10;            'state' =&gt; $this-&gt;state&#10;        ];&#10;    }&#10;&#10;    /**&#10;     * Startet das Spiel, wenn genug Spieler vorhanden sind&#10;     */&#10;    public function startGame(): bool {&#10;        if (count($this-&gt;players) &gt;= 3) {&#10;            $this-&gt;state = 'playing';&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LobbyStyle.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LobbyStyle.css" />
              <option name="updatedContent" value="&#10;.lobby-container {&#10;    background: rgba(255,255,255,0.1);&#10;    border-radius: 16px;&#10;    padding: 20px;&#10;    margin-bottom: 24px;&#10;    border: 1px solid rgba(255,255,255,0.2);&#10;    text-align: center;&#10;}&#10;&#10;.lobby-players {&#10;    background: rgba(255,255,255,0.1);&#10;    border-radius: 16px;&#10;    padding: 24px;&#10;    margin-bottom: 24px;&#10;    border: 1px solid rgba(255,255,255,0.2);&#10;}&#10;&#10;.lobby-player-card {&#10;    background: linear-gradient(135deg, rgba(255,255,255,0.2), rgba(255,255,255,0.1));&#10;    padding: 16px;&#10;    border-radius: 12px;&#10;    border: 1px solid rgba(255,255,255,0.3);&#10;    text-align: center;&#10;    backdrop-filter: blur(10px);&#10;}&#10;&#10;.lobby-btn {&#10;    padding: 16px 24px;&#10;    font-size: 18px;&#10;    font-weight: bold;&#10;    border-radius: 12px;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    border: none;&#10;    color: white;&#10;    background: linear-gradient(135deg, #00c6ff, #0072ff);&#10;    box-shadow: 0 6px 20px rgba(0,114,255,0.3);&#10;    margin: 8px;&#10;}&#10;&#10;.lobby-btn:disabled {&#10;    background: linear-gradient(135deg, #6c757d, #5a6268);&#10;    cursor: not-allowed;&#10;    box-shadow: 0 4px 12px rgba(108,117,125,0.3);&#10;}&#10;&#10;.lobby-error {&#10;    background: linear-gradient(135deg, #ff6b6b, #ee5a52);&#10;    color: white;&#10;    padding: 12px 20px;&#10;    border-radius: 12px;&#10;    margin-bottom: 20px;&#10;    text-align: center;&#10;    font-weight: bold;&#10;    box-shadow: 0 4px 12px rgba(255,107,107,0.3);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Player.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Player.js" />
              <option name="updatedContent" value="/**&#10; * Player-Klasse für einen Dixit-Spieler&#10; */&#10;class Player {&#10;  constructor({ id, name, score = 0, hand = [], isActive = false, isStoryteller = false }) {&#10;    this.id = id;&#10;    this.name = name;&#10;    this.score = score;&#10;    this.hand = hand; // Array von Kartenobjekten&#10;    this.isActive = isActive; // Ist der Spieler gerade am Zug?&#10;    this.isStoryteller = isStoryteller; // Ist der Spieler der aktuelle Storyteller?&#10;  }&#10;}&#10;&#10;export default Player;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Player.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Player.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Card.php';&#10;&#10;/**&#10; * Player-Klasse für einen Dixit-Spieler&#10; */&#10;class Player {&#10;    public int $id;&#10;    public string $name;&#10;    public int $score;&#10;    /** @var Card[] */&#10;    public array $hand;&#10;    public bool $isActive;&#10;    public bool $isStoryteller;&#10;&#10;    public function __construct(&#10;        int $id,&#10;        string $name,&#10;        int $score = 0,&#10;        array $hand = [],&#10;        bool $isActive = false,&#10;        bool $isStoryteller = false&#10;    ) {&#10;        $this-&gt;id = $id;&#10;        $this-&gt;name = $name;&#10;        $this-&gt;score = $score;&#10;        $this-&gt;hand = $hand;&#10;        $this-&gt;isActive = $isActive;&#10;        $this-&gt;isStoryteller = $isStoryteller;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README_DEPLOY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README_DEPLOY.md" />
              <option name="updatedContent" value="# Deployment-Anleitung für Don't Pick Me&#10;&#10;## Voraussetzungen&#10;- Webhosting mit PHP-Unterstützung (z.B. Netcup)&#10;- Möglichkeit, eigene Dateien hochzuladen (FTP, Web-FTP, SSH)&#10;- Optional: Node.js für das Bauen des React-Frontends&#10;&#10;## Schritt 1: Backend hochladen&#10;1. Lade den gesamten `backend`-Ordner auf deinen Server (z.B. in `public_html/backend`).&#10;2. Stelle sicher, dass die Datei `GameController.php` und die anderen PHP-Dateien vorhanden sind.&#10;3. Die Datei `.htaccess` im backend-Ordner sorgt für CORS und API-Zugriff.&#10;&#10;## Schritt 2: Frontend hochladen&#10;1. Lade den gesamten `frontend`-Ordner auf deinen Server (z.B. in `public_html/frontend`).&#10;2. Die Datei `.htaccess` im frontend-Ordner sorgt für korrektes Routing der React-App.&#10;3. Die Sounds müssen im Ordner `frontend/sounds` liegen.&#10;&#10;## Schritt 3: API-URL konfigurieren&#10;1. Öffne die Datei `frontend/config.json` und trage die korrekte URL zu deinem Backend ein, z.B.:&#10;   ```json&#10;   { &quot;API_URL&quot;: &quot;https://deinedomain.de/backend&quot; }&#10;   ```&#10;&#10;## Schritt 4: React-Frontend bauen (optional)&#10;Falls du das Frontend lokal bauen möchtest:&#10;1. Navigiere in den `frontend`-Ordner.&#10;2. Führe `npm install` und dann `npm run build` aus.&#10;3. Lade den Inhalt des `build`-Ordners auf den Server.&#10;&#10;## Schritt 5: Domain und Dokumentstamm&#10;- Setze den Dokumentstamm deiner Domain auf `public_html` oder den Ordner, in dem `frontend` und `backend` liegen.&#10;- Prüfe, ob du über `https://deinedomain.de/frontend` und `https://deinedomain.de/backend/GameController.php` zugreifen kannst.&#10;&#10;## Schritt 6: Testen&#10;- Öffne die Seite im Browser und teste die wichtigsten Funktionen (Lobby, Spielstart, Karten, Sounds).&#10;- Prüfe die Kommunikation zwischen Frontend und Backend.&#10;&#10;---&#10;&#10;**Hinweis:**&#10;- Bei Problemen mit CORS, Routing oder PHP-Rechten prüfe die .htaccess und Server-Einstellungen.&#10;- Für weitere Fragen oder Anpassungen kannst du dich jederzeit melden!&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ScoringPhase.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ScoringPhase.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;&#10;/**&#10; * ScoringPhase-Klasse für die Dixit-Auswertungsphase&#10; */&#10;class ScoringPhase {&#10;    /**&#10;     * Berechnet und vergibt Punkte an die Spieler&#10;     * @param Player[] $players&#10;     * @param int $storytellerCardId&#10;     * @param array&lt;int, int&gt; $votes&#10;     */&#10;    public function calculateScores(array $players, int $storytellerCardId, array $votes): void {&#10;        // Beispielhafte Punktevergabe nach Dixit-Regeln&#10;        $storytellerFound = false;&#10;        $voteCounts = array_count_values($votes);&#10;&#10;        foreach ($players as $player) {&#10;            if (isset($votes[$player-&gt;id]) &amp;&amp; $votes[$player-&gt;id] === $storytellerCardId) {&#10;                $player-&gt;score += 3;&#10;                $storytellerFound = true;&#10;            }&#10;        }&#10;&#10;        // Storyteller bekommt Punkte, wenn nicht alle oder keiner richtig gewählt hat&#10;        if ($storytellerFound &amp;&amp; count($voteCounts) &gt; 1) {&#10;            foreach ($players as $player) {&#10;                if (isset($votes[$player-&gt;id]) &amp;&amp; $votes[$player-&gt;id] !== $storytellerCardId) {&#10;                    // Bonuspunkte für Spieler, deren Karte gewählt wurde&#10;                    $player-&gt;score += $voteCounts[$votes[$player-&gt;id]] ?? 0;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/StorytellingPhase.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StorytellingPhase.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;&#10;/**&#10; * StorytellingPhase-Klasse für die Dixit-Storytelling-Phase&#10; */&#10;class StorytellingPhase {&#10;    private Player $storyteller;&#10;    private Card $chosenCard;&#10;    private string $hint;&#10;&#10;    public function __construct(Player $storyteller) {&#10;        $this-&gt;storyteller = $storyteller;&#10;    }&#10;&#10;    public function start(string $hint, Card $card) {&#10;        $this-&gt;hint = $hint;&#10;        $this-&gt;chosenCard = $card;&#10;        $this-&gt;storyteller-&gt;isStoryteller = true;&#10;    }&#10;&#10;    public function getHint(): string {&#10;        return $this-&gt;hint;&#10;    }&#10;&#10;    public function getChosenCard(): Card {&#10;        return $this-&gt;chosenCard;&#10;    }&#10;&#10;    public function getStoryteller(): Player {&#10;        return $this-&gt;storyteller;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/VotingPhase.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/VotingPhase.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;&#10;/**&#10; * VotingPhase-Klasse für die Dixit-Abstimmungsphase&#10; */&#10;class VotingPhase {&#10;    /** @var array&lt;int, int&gt; */&#10;    private array $votes = [];&#10;&#10;    /**&#10;     * Spieler stimmt für eine Karte ab&#10;     */&#10;    public function vote(Player $player, int $cardId): void {&#10;        $this-&gt;votes[$player-&gt;id] = $cardId;&#10;    }&#10;&#10;    /**&#10;     * Gibt alle Stimmen zurück&#10;     */&#10;    public function getVotes(): array {&#10;        return $this-&gt;votes;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/.htaccess">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/.htaccess" />
              <option name="originalContent" value="# CORS und PHP-API für Backend&#10;&lt;IfModule mod_headers.c&gt;&#10;    Header set Access-Control-Allow-Origin &quot;*&quot;&#10;    Header set Access-Control-Allow-Methods &quot;GET,POST,OPTIONS&quot;&#10;    Header set Access-Control-Allow-Headers &quot;Content-Type&quot;&#10;&lt;/IfModule&gt;&#10;&#10;# PHP-Dateien direkt ausführen&#10;AddType application/json .php&#10;&#10;" />
              <option name="updatedContent" value="# CORS und PHP-API für Backend&#10;&lt;IfModule mod_headers.c&gt;&#10;    Header set Access-Control-Allow-Origin &quot;*&quot;&#10;    Header set Access-Control-Allow-Methods &quot;GET,POST,OPTIONS&quot;&#10;    Header set Access-Control-Allow-Headers &quot;Content-Type&quot;&#10;&lt;/IfModule&gt;&#10;&#10;# Keine unnötigen Typen setzen, PHP bleibt PHP" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/Game.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/Game.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;require_once 'StorytellingPhase.php';&#10;require_once 'CardSelectionPhase.php';&#10;require_once 'VotingPhase.php';&#10;require_once 'ScoringPhase.php';&#10;&#10;class Game {&#10;    public string $gameId;&#10;    /** @var Player[] */&#10;    public array $players = [];&#10;    public int $storytellerIndex = 0;&#10;    public string $phase = 'waiting';&#10;    public array $selectedCards = [];&#10;    public array $votes = [];&#10;    public ?string $hint = null;&#10;    public ?int $storytellerCard = null;&#10;    public ?string $winner = null;&#10;    public array $mixedCards = [];&#10;    public string $state = 'waiting';&#10;&#10;    public function __construct(string $gameId, array $players) {&#10;        $this-&gt;gameId = $gameId;&#10;        $this-&gt;players = $players;&#10;    }&#10;&#10;    public function getState(): array {&#10;        return [&#10;            'gameId' =&gt; $this-&gt;gameId,&#10;            'players' =&gt; $this-&gt;players,&#10;            'storytellerIndex' =&gt; $this-&gt;storytellerIndex,&#10;            'phase' =&gt; $this-&gt;phase,&#10;            'selectedCards' =&gt; $this-&gt;selectedCards,&#10;            'votes' =&gt; $this-&gt;votes,&#10;            'hint' =&gt; $this-&gt;hint,&#10;            'storytellerCard' =&gt; $this-&gt;storytellerCard,&#10;            'winner' =&gt; $this-&gt;winner,&#10;            'mixedCards' =&gt; $this-&gt;mixedCards,&#10;            'state' =&gt; $this-&gt;state&#10;        ];&#10;    }&#10;&#10;    public function startGame(): void {&#10;        $this-&gt;phase = 'storytelling';&#10;        $this-&gt;state = 'playing';&#10;        // Setze alle Spieler auf nicht Storyteller&#10;        foreach ($this-&gt;players as $player) {&#10;            $player-&gt;isStoryteller = false;&#10;        }&#10;        // Erster Spieler wird Storyteller&#10;        if (count($this-&gt;players) &gt; 0) {&#10;            $this-&gt;players[0]-&gt;isStoryteller = true;&#10;        }&#10;    }&#10;&#10;    public function giveHint(string $playerName, int $cardId, string $hint): bool {&#10;        $storyteller = null;&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;isStoryteller) {&#10;                $storyteller = $player;&#10;                break;&#10;            }&#10;        }&#10;        if ($storyteller &amp;&amp; $storyteller-&gt;name === $playerName) {&#10;            $this-&gt;hint = $hint;&#10;            $this-&gt;storytellerCard = $cardId;&#10;            $this-&gt;phase = 'selectCards';&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public function chooseCard(string $playerName, int $cardId): bool {&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;name === $playerName &amp;&amp; !$player-&gt;isStoryteller) {&#10;                $this-&gt;selectedCards[] = [&#10;                    'playerId' =&gt; $player-&gt;id,&#10;                    'cardId' =&gt; $cardId&#10;                ];&#10;                break;&#10;            }&#10;        }&#10;        // Wenn alle Spieler (außer Erzähler) gewählt haben, nächste Phase&#10;        $nonStorytellerCount = 0;&#10;        foreach ($this-&gt;players as $player) {&#10;            if (!$player-&gt;isStoryteller) {&#10;                $nonStorytellerCount++;&#10;            }&#10;        }&#10;        if (count($this-&gt;selectedCards) &gt;= $nonStorytellerCount) {&#10;            $this-&gt;phase = 'voting';&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public function vote(string $playerName, int $cardId): bool {&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;name === $playerName) {&#10;                // Spieler darf nicht für eigene Karte stimmen&#10;                $ownCard = array_filter($this-&gt;selectedCards, fn($sc) =&gt; $sc['playerId'] === $player-&gt;id &amp;&amp; $sc['cardId'] === $cardId);&#10;                if ($ownCard) return false;&#10;                $this-&gt;votes[] = [&#10;                    'playerId' =&gt; $player-&gt;id,&#10;                    'cardId' =&gt; $cardId&#10;                ];&#10;                break;&#10;            }&#10;        }&#10;        // Wenn alle Stimmen abgegeben, nächste Phase&#10;        if (count($this-&gt;votes) &gt;= count($this-&gt;players) - 1) {&#10;            $this-&gt;phase = 'reveal';&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public function nextRound(): void {&#10;        // Punkte berechnen&#10;        $scoring = new ScoringPhase();&#10;        $scoring-&gt;calculateScores($this-&gt;players, $this-&gt;storytellerCard, array_column($this-&gt;votes, 'cardId'));&#10;        // Erzähler wechseln&#10;        $this-&gt;storytellerIndex = ($this-&gt;storytellerIndex + 1) % count($this-&gt;players);&#10;        // Reset für neue Runde&#10;        $this-&gt;phase = 'storytelling';&#10;        $this-&gt;selectedCards = [];&#10;        $this-&gt;votes = [];&#10;        $this-&gt;hint = null;&#10;        $this-&gt;storytellerCard = null;&#10;    }&#10;&#10;    public function restart(): void {&#10;        foreach ($this-&gt;players as $player) {&#10;            $player-&gt;score = 0;&#10;        }&#10;        $this-&gt;phase = 'waiting';&#10;        $this-&gt;state = 'waiting';&#10;        $this-&gt;selectedCards = [];&#10;        $this-&gt;votes = [];&#10;        $this-&gt;hint = null;&#10;        $this-&gt;storytellerCard = null;&#10;        $this-&gt;winner = null;&#10;        $this-&gt;storytellerIndex = 0;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;require_once 'StorytellingPhase.php';&#10;require_once 'CardSelectionPhase.php';&#10;require_once 'VotingPhase.php';&#10;require_once 'ScoringPhase.php';&#10;&#10;class Game {&#10;    public string $gameId;&#10;    /** @var Player[] */&#10;    public array $players = [];&#10;    public int $storytellerIndex = 0;&#10;    public string $phase = 'waiting';&#10;    public array $selectedCards = [];&#10;    public array $votes = [];&#10;    public ?string $hint = null;&#10;    public ?int $storytellerCard = null;&#10;    public ?string $winner = null;&#10;    public array $mixedCards = [];&#10;    public string $state = 'waiting';&#10;&#10;    public function __construct(string $gameId, array $players) {&#10;        $this-&gt;gameId = $gameId;&#10;        $this-&gt;players = $players;&#10;    }&#10;&#10;    public function getState(): array {&#10;        return [&#10;            'gameId' =&gt; $this-&gt;gameId,&#10;            'players' =&gt; $this-&gt;players,&#10;            'storytellerIndex' =&gt; $this-&gt;storytellerIndex,&#10;            'phase' =&gt; $this-&gt;phase,&#10;            'selectedCards' =&gt; $this-&gt;selectedCards,&#10;            'votes' =&gt; $this-&gt;votes,&#10;            'hint' =&gt; $this-&gt;hint,&#10;            'storytellerCard' =&gt; $this-&gt;storytellerCard,&#10;            'winner' =&gt; $this-&gt;winner,&#10;            'mixedCards' =&gt; $this-&gt;mixedCards,&#10;            'state' =&gt; $this-&gt;state&#10;        ];&#10;    }&#10;&#10;    public function startGame(): void {&#10;        $this-&gt;phase = 'storytelling';&#10;        $this-&gt;state = 'playing';&#10;        // Setze alle Spieler auf nicht Storyteller&#10;        foreach ($this-&gt;players as $player) {&#10;            $player-&gt;isStoryteller = false;&#10;        }&#10;        // Erster Spieler wird Storyteller&#10;        if (count($this-&gt;players) &gt; 0) {&#10;            $this-&gt;players[0]-&gt;isStoryteller = true;&#10;        }&#10;    }&#10;&#10;    public function giveHint(string $playerName, int $cardId, string $hint): bool {&#10;        $storyteller = null;&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;isStoryteller) {&#10;                $storyteller = $player;&#10;                break;&#10;            }&#10;        }&#10;        if ($storyteller &amp;&amp; $storyteller-&gt;name === $playerName) {&#10;            $this-&gt;hint = $hint;&#10;            $this-&gt;storytellerCard = $cardId;&#10;            $this-&gt;phase = 'selectCards';&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public function chooseCard(string $playerName, int $cardId): bool {&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;name === $playerName &amp;&amp; !$player-&gt;isStoryteller) {&#10;                $this-&gt;selectedCards[] = [&#10;                    'playerId' =&gt; $player-&gt;id,&#10;                    'cardId' =&gt; $cardId&#10;                ];&#10;                break;&#10;            }&#10;        }&#10;        // Wenn alle Spieler (außer Erzähler) gewählt haben, nächste Phase&#10;        $nonStorytellerCount = 0;&#10;        foreach ($this-&gt;players as $player) {&#10;            if (!$player-&gt;isStoryteller) {&#10;                $nonStorytellerCount++;&#10;            }&#10;        }&#10;        if (count($this-&gt;selectedCards) &gt;= $nonStorytellerCount) {&#10;            $this-&gt;phase = 'voting';&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public function vote(string $playerName, int $cardId): bool {&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;name === $playerName) {&#10;                // Spieler darf nicht für eigene Karte stimmen&#10;                $ownCard = array_filter($this-&gt;selectedCards, fn($sc) =&gt; $sc['playerId'] === $player-&gt;id &amp;&amp; $sc['cardId'] === $cardId);&#10;                if ($ownCard) return false;&#10;                $this-&gt;votes[] = [&#10;                    'playerId' =&gt; $player-&gt;id,&#10;                    'cardId' =&gt; $cardId&#10;                ];&#10;                break;&#10;            }&#10;        }&#10;        // Wenn alle Stimmen abgegeben, nächste Phase&#10;        if (count($this-&gt;votes) &gt;= count($this-&gt;players) - 1) {&#10;            $this-&gt;phase = 'reveal';&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public function nextRound(): void {&#10;        // Punkte berechnen&#10;        $scoring = new ScoringPhase();&#10;        $scoring-&gt;calculateScores($this-&gt;players, $this-&gt;storytellerCard, array_column($this-&gt;votes, 'cardId'));&#10;        // Erzähler wechseln&#10;        $this-&gt;storytellerIndex = ($this-&gt;storytellerIndex + 1) % count($this-&gt;players);&#10;        // Reset für neue Runde&#10;        $this-&gt;phase = 'storytelling';&#10;        $this-&gt;selectedCards = [];&#10;        $this-&gt;votes = [];&#10;        $this-&gt;hint = null;&#10;        $this-&gt;storytellerCard = null;&#10;        // Status der Kartenauswahl für alle Spieler zurücksetzen&#10;        foreach ($this-&gt;players as $player) {&#10;            $player-&gt;hasSelectedCard = false;&#10;        }&#10;    }&#10;&#10;    public function restart(): void {&#10;        foreach ($this-&gt;players as $player) {&#10;            $player-&gt;score = 0;&#10;        }&#10;        $this-&gt;phase = 'waiting';&#10;        $this-&gt;state = 'waiting';&#10;        $this-&gt;selectedCards = [];&#10;        $this-&gt;votes = [];&#10;        $this-&gt;hint = null;&#10;        $this-&gt;storytellerCard = null;&#10;        $this-&gt;winner = null;&#10;        $this-&gt;storytellerIndex = 0;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/GameController.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/GameController.php" />
              <option name="updatedContent" value="&lt;?php&#10;// GameController.php: API-Endpunkt für das Spiel&#10;require_once 'Game.php';&#10;require_once 'Player.php';&#10;&#10;header('Content-Type: application/json');&#10;header('Access-Control-Allow-Origin: *');&#10;header('Access-Control-Allow-Methods: GET, POST, OPTIONS');&#10;header('Access-Control-Allow-Headers: Content-Type');&#10;&#10;// Dummy: Spiel-Instanz aus Session oder Datei laden (hier als Beispiel)&#10;// In Produktion: Spielzustand persistent speichern/laden!&#10;if (!isset($_SESSION)) session_start();&#10;if (!isset($_SESSION['game'])) {&#10;    $_SESSION['game'] = new Game(uniqid('game_'), []);&#10;}&#10;$game = $_SESSION['game'];&#10;&#10;// Request-Daten lesen&#10;$input = json_decode(file_get_contents('php://input'), true);&#10;$action = $input['action'] ?? $_GET['action'] ?? null;&#10;$playerName = $input['playerName'] ?? null;&#10;$cardId = $input['cardId'] ?? null;&#10;$hint = $input['hint'] ?? null;&#10;&#10;// Spielerobjekt finden&#10;$player = null;&#10;if ($playerName) {&#10;    foreach ($game-&gt;players as $p) {&#10;        if ($p-&gt;name === $playerName) {&#10;            $player = $p;&#10;            break;&#10;        }&#10;    }&#10;}&#10;&#10;try {&#10;    switch ($action) {&#10;        case 'getState':&#10;            echo json_encode($game-&gt;getState());&#10;            break;&#10;        case 'giveHint':&#10;            $ok = $game-&gt;giveHint($playerName, $cardId, $hint);&#10;            echo json_encode(['success' =&gt; $ok]);&#10;            break;&#10;        case 'chooseCard':&#10;            $ok = $game-&gt;chooseCard($playerName, $cardId);&#10;            echo json_encode(['success' =&gt; $ok]);&#10;            break;&#10;        case 'vote':&#10;            $ok = $game-&gt;vote($playerName, $cardId);&#10;            echo json_encode(['success' =&gt; $ok]);&#10;            break;&#10;        case 'nextRound':&#10;            $game-&gt;nextRound();&#10;            echo json_encode(['success' =&gt; true]);&#10;            break;&#10;        default:&#10;            echo json_encode(['error' =&gt; 'Unbekannte Aktion']);&#10;    }&#10;} catch (Exception $e) {&#10;    echo json_encode(['error' =&gt; $e-&gt;getMessage()]);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/Player.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/Player.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;require_once 'Card.php';&#10;&#10;/**&#10; * Player-Klasse für einen Dixit-Spieler&#10; */&#10;class Player {&#10;    public int $id;&#10;    public string $name;&#10;    public int $score;&#10;    /** @var Card[] */&#10;    public array $hand;&#10;    public bool $isActive;&#10;    public bool $isStoryteller;&#10;&#10;    public function __construct(&#10;        int $id,&#10;        string $name,&#10;        int $score = 0,&#10;        array $hand = [],&#10;        bool $isActive = false,&#10;        bool $isStoryteller = false&#10;    ) {&#10;        $this-&gt;id = $id;&#10;        $this-&gt;name = $name;&#10;        $this-&gt;score = $score;&#10;        $this-&gt;hand = $hand;&#10;        $this-&gt;isActive = $isActive;&#10;        $this-&gt;isStoryteller = $isStoryteller;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Card.php';&#10;&#10;/**&#10; * Player-Klasse für einen Dixit-Spieler&#10; */&#10;class Player {&#10;    public int $id;&#10;    public string $name;&#10;    public int $score;&#10;    /** @var Card[] */&#10;    public array $hand;&#10;    public bool $isActive;&#10;    public bool $isStoryteller;&#10;    public bool $hasSelectedCard;&#10;&#10;    public function __construct(&#10;        int $id,&#10;        string $name,&#10;        int $score = 0,&#10;        array $hand = [],&#10;        bool $isActive = false,&#10;        bool $isStoryteller = false,&#10;        bool $hasSelectedCard = false&#10;    ) {&#10;        $this-&gt;id = $id;&#10;        $this-&gt;name = $name;&#10;        $this-&gt;score = $score;&#10;        $this-&gt;hand = $hand;&#10;        $this-&gt;isActive = $isActive;&#10;        $this-&gt;isStoryteller = $isStoryteller;&#10;        $this-&gt;hasSelectedCard = $hasSelectedCard;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/.htaccess">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/.htaccess" />
              <option name="updatedContent" value="# React SPA Routing&#10;RewriteEngine On&#10;RewriteBase /frontend/&#10;RewriteCond %{REQUEST_FILENAME} !-f&#10;RewriteCond %{REQUEST_FILENAME} !-d&#10;RewriteRule ^ index.html [L]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/App.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/App.js" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import Lobby from './components/Lobby';&#10;import Game from './components/Game';&#10;import VolumeControl from './components/VolumeControl';&#10;import audioManager from './utils/AudioManager';&#10;&#10;class ErrorBoundary extends React.Component {&#10;    constructor(props) {&#10;        super(props);&#10;        this.state = { hasError: false, error: null };&#10;    }&#10;    static getDerivedStateFromError(error) {&#10;        return { hasError: true, error };&#10;    }&#10;    componentDidCatch(error, errorInfo) {&#10;        console.error('ErrorBoundary caught:', error, errorInfo);&#10;    }&#10;    render() {&#10;        if (this.state.hasError) {&#10;            return (&#10;                &lt;div style={{ color: 'red', padding: '40px', background: '#fff' }}&gt;&#10;                    &lt;h2&gt;Ein Fehler ist aufgetreten!&lt;/h2&gt;&#10;                    &lt;pre&gt;{this.state.error &amp;&amp; this.state.error.toString()}&lt;/pre&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;        return this.props.children;&#10;    }&#10;}&#10;&#10;function App() {&#10;    const [gameId, setGameId] = useState('');&#10;    const [playerName, setPlayerName] = useState('');&#10;    const [isInGame, setIsInGame] = useState(false);&#10;    const [volume, setVolume] = useState(0.3); // Reduzierte Standard-Lautstärke&#10;&#10;    // Initialisiere AudioManager beim App-Start&#10;    useEffect(() =&gt; {&#10;        audioManager.setVolume(volume);&#10;&#10;        // Auto-start Lobby-Musik mit reduzierter Lautstärke&#10;        audioManager.playTrack('lobby.mp3', true, 2000);&#10;&#10;        // Cleanup bei App-Beendigung&#10;        return () =&gt; {&#10;            audioManager.stopTrack(500);&#10;        };&#10;    }, []);&#10;&#10;    // Volume änderungen an AudioManager weiterleiten&#10;    useEffect(() =&gt; {&#10;        audioManager.setVolume(volume);&#10;    }, [volume]);&#10;&#10;    const handleGameStart = () =&gt; {&#10;        setIsInGame(true);&#10;    };&#10;&#10;    const handleLeaveGame = () =&gt; {&#10;        setIsInGame(false);&#10;        setGameId('');&#10;        // Wechsel zurück zur Lobby-Musik&#10;        audioManager.playTrack('lobby.mp3', true, 1000);&#10;    };&#10;&#10;    const handleVolumeChange = (newVolume) =&gt; {&#10;        setVolume(newVolume);&#10;    };&#10;&#10;    return (&#10;        &lt;ErrorBoundary&gt;&#10;            &lt;div className=&quot;App&quot; style={{ position: 'relative' }}&gt;&#10;                {/* VolumeControl für die Startseite */}&#10;                {!isInGame &amp;&amp; &lt;VolumeControl volume={volume} onChange={handleVolumeChange} /&gt;}&#10;&#10;                &lt;div style={{&#10;                    minHeight: '100vh',&#10;                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',&#10;                    padding: '20px'&#10;                }}&gt;&#10;                    &lt;div style={{ maxWidth: '800px', margin: '0 auto' }}&gt;&#10;                        {/* App Header */}&#10;                        &lt;div style={{&#10;                            textAlign: 'center',&#10;                            marginBottom: '40px',&#10;                            background: 'rgba(255,255,255,0.1)',&#10;                            padding: '30px',&#10;                            borderRadius: '20px',&#10;                            backdropFilter: 'blur(10px)',&#10;                            color: 'white',&#10;                            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',&#10;                            position: 'relative'&#10;                        }}&gt;&#10;                            &lt;h1 style={{&#10;                                margin: '0 0 15px 0',&#10;                                fontSize: '42px',&#10;                                fontWeight: 'bold',&#10;                                textShadow: '3px 3px 6px rgba(0,0,0,0.3)',&#10;                                background: 'linear-gradient(45deg, #ffd700, #ffed4e)',&#10;                                WebkitBackgroundClip: 'text',&#10;                                WebkitTextFillColor: 'transparent',&#10;                                backgroundClip: 'text'&#10;                            }}&gt;&#10;                                 Don't Choose Me&#10;                            &lt;/h1&gt;&#10;                            &lt;p style={{&#10;                                margin: 0,&#10;                                fontSize: '18px',&#10;                                opacity: 0.9,&#10;                                fontWeight: '300'&#10;                            }}&gt;&#10;                                Das kreative Ratespiel für Freunde und Familie&#10;                            &lt;/p&gt;&#10;&#10;                            {/* Audio Indicator für Startseite */}&#10;                            {!isInGame &amp;&amp; (&#10;                                &lt;div style={{&#10;                                    position: 'absolute',&#10;                                    top: '15px',&#10;                                    right: '15px',&#10;                                    display: 'flex',&#10;                                    alignItems: 'center',&#10;                                    gap: '8px',&#10;                                    background: 'rgba(255,255,255,0.1)',&#10;                                    padding: '6px 12px',&#10;                                    borderRadius: '20px',&#10;                                    fontSize: '12px',&#10;                                    opacity: 0.7&#10;                                }}&gt;&#10;                                     Willkommensmusik&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Main Content */}&#10;                        &lt;div style={{&#10;                            background: 'rgba(255,255,255,0.1)',&#10;                            borderRadius: '20px',&#10;                            padding: '30px',&#10;                            backdropFilter: 'blur(10px)',&#10;                            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',&#10;                            border: '1px solid rgba(255,255,255,0.2)'&#10;                        }}&gt;&#10;                            {isInGame ? (&#10;                                &lt;Game&#10;                                    gameId={gameId}&#10;                                    playerName={playerName}&#10;                                    onLeaveGame={handleLeaveGame}&#10;                                    volume={volume}&#10;                                    setVolume={setVolume}&#10;                                /&gt;&#10;                            ) : (&#10;                                &lt;Lobby&#10;                                    gameId={gameId}&#10;                                    setGameId={setGameId}&#10;                                    playerName={playerName}&#10;                                    setPlayerName={setPlayerName}&#10;                                    onGameStart={handleGameStart}&#10;                                    volume={volume}&#10;                                    setVolume={setVolume}&#10;                                /&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Footer */}&#10;                        &lt;div style={{&#10;                            textAlign: 'center',&#10;                            marginTop: '30px',&#10;                            color: 'rgba(255,255,255,0.7)',&#10;                            fontSize: '14px'&#10;                        }}&gt;&#10;                            &lt;p style={{ margin: 0 }}&gt;&#10;                                 Ein Erzähler gibt einen Hinweis zu seiner Karte&lt;br/&gt;&#10;                                 Andere wählen passende Karten aus ihrer Hand&lt;br/&gt;&#10;                                ️ Alle raten, welche Karte vom Erzähler stammt&lt;br/&gt;&#10;                                 Erste Person mit 30 Punkten gewinnt!&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/ErrorBoundary&gt;&#10;    );&#10;}&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { createGame, joinGame, getGameState } from './api';&#10;import Lobby from './Lobby';&#10;import Game from './Game';&#10;import VolumeControl from './components/VolumeControl';&#10;import audioManager from './utils/AudioManager';&#10;&#10;class ErrorBoundary extends React.Component {&#10;    constructor(props) {&#10;        super(props);&#10;        this.state = { hasError: false, error: null };&#10;    }&#10;    static getDerivedStateFromError(error) {&#10;        return { hasError: true, error };&#10;    }&#10;    componentDidCatch(error, errorInfo) {&#10;        console.error('ErrorBoundary caught:', error, errorInfo);&#10;    }&#10;    render() {&#10;        if (this.state.hasError) {&#10;            return (&#10;                &lt;div style={{ color: 'red', padding: '40px', background: '#fff' }}&gt;&#10;                    &lt;h2&gt;Ein Fehler ist aufgetreten!&lt;/h2&gt;&#10;                    &lt;pre&gt;{this.state.error &amp;&amp; this.state.error.toString()}&lt;/pre&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;        return this.props.children;&#10;    }&#10;}&#10;&#10;function App() {&#10;    const [gameId, setGameId] = useState('');&#10;    const [playerName, setPlayerName] = useState('');&#10;    const [isInGame, setIsInGame] = useState(false);&#10;    const [players, setPlayers] = useState([]);&#10;    const [error, setError] = useState('');&#10;    const [volume, setVolume] = useState(0.3); // Reduzierte Standard-Lautstärke&#10;&#10;    // Initialisiere AudioManager beim App-Start&#10;    useEffect(() =&gt; {&#10;        audioManager.setVolume(volume);&#10;&#10;        // Auto-start Lobby-Musik mit reduzierter Lautstärke&#10;        audioManager.playTrack('lobby.mp3', true, 2000);&#10;&#10;        // Cleanup bei App-Beendigung&#10;        return () =&gt; {&#10;            audioManager.stopTrack(500);&#10;        };&#10;    }, []);&#10;&#10;    // Volume änderungen an AudioManager weiterleiten&#10;    useEffect(() =&gt; {&#10;        audioManager.setVolume(volume);&#10;    }, [volume]);&#10;&#10;    useEffect(() =&gt; {&#10;        if (gameId) {&#10;            getGameState(gameId).then(state =&gt; {&#10;                setPlayers(state.players || []);&#10;            });&#10;        }&#10;    }, [gameId, isInGame]);&#10;&#10;    const handleJoin = async () =&gt; {&#10;        if (!gameId || !playerName) {&#10;            setError('Bitte Raum-ID und Namen eingeben!');&#10;            return;&#10;        }&#10;        try {&#10;            const res = await joinGame(gameId, playerName);&#10;            if (res.success) {&#10;                setIsInGame(true);&#10;                setError('');&#10;            } else {&#10;                setError(res.message || 'Beitritt fehlgeschlagen');&#10;            }&#10;        } catch (e) {&#10;            setError('Serverfehler');&#10;        }&#10;    };&#10;&#10;    const handleStart = async () =&gt; {&#10;        if (players.length &lt; 3) {&#10;            setError('Mindestens 3 Spieler benötigt!');&#10;            return;&#10;        }&#10;        try {&#10;            const res = await createGame(playerName);&#10;            if (res.success) {&#10;                setIsInGame(true);&#10;                setError('');&#10;            } else {&#10;                setError(res.message || 'Start fehlgeschlagen');&#10;            }&#10;        } catch (e) {&#10;            setError('Serverfehler');&#10;        }&#10;    };&#10;&#10;    const handleLeaveGame = () =&gt; {&#10;        setIsInGame(false);&#10;        setGameId('');&#10;        setPlayers([]);&#10;        // Wechsel zurück zur Lobby-Musik&#10;        audioManager.playTrack('lobby.mp3', true, 1000);&#10;    };&#10;&#10;    const handleVolumeChange = (newVolume) =&gt; {&#10;        setVolume(newVolume);&#10;    };&#10;&#10;    return (&#10;        &lt;ErrorBoundary&gt;&#10;            &lt;div className=&quot;App&quot; style={{ position: 'relative' }}&gt;&#10;                {/* VolumeControl für die Startseite */}&#10;                {!isInGame &amp;&amp; &lt;VolumeControl volume={volume} onChange={handleVolumeChange} /&gt;}&#10;&#10;                &lt;div style={{&#10;                    minHeight: '100vh',&#10;                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',&#10;                    padding: '20px'&#10;                }}&gt;&#10;                    &lt;div style={{ maxWidth: '800px', margin: '0 auto' }}&gt;&#10;                        {/* App Header */}&#10;                        &lt;div style={{&#10;                            textAlign: 'center',&#10;                            marginBottom: '40px',&#10;                            background: 'rgba(255,255,255,0.1)',&#10;                            padding: '30px',&#10;                            borderRadius: '20px',&#10;                            backdropFilter: 'blur(10px)',&#10;                            color: 'white',&#10;                            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',&#10;                            position: 'relative'&#10;                        }}&gt;&#10;                            &lt;h1 style={{&#10;                                margin: '0 0 15px 0',&#10;                                fontSize: '42px',&#10;                                fontWeight: 'bold',&#10;                                textShadow: '3px 3px 6px rgba(0,0,0,0.3)',&#10;                                background: 'linear-gradient(45deg, #ffd700, #ffed4e)',&#10;                                WebkitBackgroundClip: 'text',&#10;                                WebkitTextFillColor: 'transparent',&#10;                                backgroundClip: 'text'&#10;                            }}&gt;&#10;                                 Don't Choose Me&#10;                            &lt;/h1&gt;&#10;                            &lt;p style={{&#10;                                margin: 0,&#10;                                fontSize: '18px',&#10;                                opacity: 0.9,&#10;                                fontWeight: '300'&#10;                            }}&gt;&#10;                                Das kreative Ratespiel für Freunde und Familie&#10;                            &lt;/p&gt;&#10;&#10;                            {/* Audio Indicator für Startseite */}&#10;                            {!isInGame &amp;&amp; (&#10;                                &lt;div style={{&#10;                                    position: 'absolute',&#10;                                    top: '15px',&#10;                                    right: '15px',&#10;                                    display: 'flex',&#10;                                    alignItems: 'center',&#10;                                    gap: '8px',&#10;                                    background: 'rgba(255,255,255,0.1)',&#10;                                    padding: '6px 12px',&#10;                                    borderRadius: '20px',&#10;                                    fontSize: '12px',&#10;                                    opacity: 0.7&#10;                                }}&gt;&#10;                                     Willkommensmusik&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Main Content */}&#10;                        &lt;div style={{&#10;                            background: 'rgba(255,255,255,0.1)',&#10;                            borderRadius: '20px',&#10;                            padding: '30px',&#10;                            backdropFilter: 'blur(10px)',&#10;                            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',&#10;                            border: '1px solid rgba(255,255,255,0.2)'&#10;                        }}&gt;&#10;                            {isInGame ? (&#10;                                &lt;Game&#10;                                    gameId={gameId}&#10;                                    playerName={playerName}&#10;                                    onLeaveGame={handleLeaveGame}&#10;                                    volume={volume}&#10;                                    setVolume={setVolume}&#10;                                /&gt;&#10;                            ) : (&#10;                                &lt;Lobby&#10;                                    players={players}&#10;                                    gameId={gameId}&#10;                                    error={error}&#10;                                    onJoin={handleJoin}&#10;                                    onStart={handleStart}&#10;                                    onLeave={handleLeaveGame}&#10;                                /&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Footer */}&#10;                        &lt;div style={{&#10;                            textAlign: 'center',&#10;                            marginTop: '30px',&#10;                            color: 'rgba(255,255,255,0.7)',&#10;                            fontSize: '14px'&#10;                        }}&gt;&#10;                            &lt;p style={{ margin: 0 }}&gt;&#10;                                 Ein Erzähler gibt einen Hinweis zu seiner Karte&lt;br/&gt;&#10;                                 Andere wählen passende Karten aus ihrer Hand&lt;br/&gt;&#10;                                ️ Alle raten, welche Karte vom Erzähler stammt&lt;br/&gt;&#10;                                 Erste Person mit 30 Punkten gewinnt!&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/ErrorBoundary&gt;&#10;    );&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/Game.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/Game.js" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { getGameState, giveHint, chooseCard, vote, nextRound } from './api';&#10;import './GameStyle.css';&#10;&#10;function Game({ gameId, playerName, onLeaveGame, volume, setVolume }) {&#10;  const [gameState, setGameState] = useState(null);&#10;  const [hint, setHint] = useState('');&#10;  const [selectedCard, setSelectedCard] = useState(null);&#10;  const [voteCard, setVoteCard] = useState(null);&#10;  const [error, setError] = useState('');&#10;&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(() =&gt; {&#10;      getGameState(gameId).then(setGameState);&#10;    }, 1500);&#10;    return () =&gt; clearInterval(interval);&#10;  }, [gameId]);&#10;&#10;  if (!gameState) return &lt;div&gt;Spiel wird geladen...&lt;/div&gt;;&#10;&#10;  const phase = gameState.phase;&#10;  const isStoryteller = gameState.players.find(p =&gt; p.name === playerName)?.isStoryteller;&#10;&#10;  const handleGiveHint = async () =&gt; {&#10;    if (!hint || !selectedCard) {&#10;      setError('Bitte Hinweis und Karte wählen!');&#10;      return;&#10;    }&#10;    await giveHint(gameId, playerName, selectedCard, hint);&#10;    setHint('');&#10;    setSelectedCard(null);&#10;  };&#10;&#10;  const handleChooseCard = async () =&gt; {&#10;    if (!selectedCard) {&#10;      setError('Bitte eine Karte wählen!');&#10;      return;&#10;    }&#10;    await chooseCard(gameId, playerName, selectedCard);&#10;    setSelectedCard(null);&#10;  };&#10;&#10;  const handleVote = async () =&gt; {&#10;    if (!voteCard) {&#10;      setError('Bitte eine Karte zum Abstimmen wählen!');&#10;      return;&#10;    }&#10;    await vote(gameId, playerName, voteCard);&#10;    setVoteCard(null);&#10;  };&#10;&#10;  const handleNextRound = async () =&gt; {&#10;    await nextRound(gameId);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;game-container&quot;&gt;&#10;      &lt;h2&gt;Spiel: {gameId}&lt;/h2&gt;&#10;      &lt;div&gt;Phase: {phase}&lt;/div&gt;&#10;      &lt;div&gt;Spieler:&#10;        &lt;ul&gt;&#10;          {gameState.players.map(p =&gt; (&#10;            &lt;li key={p.id} style={{ fontWeight: p.name === playerName ? 'bold' : 'normal' }}&gt;&#10;              {p.name} {p.isStoryteller ? '(Erzähler)' : ''} - Punkte: {p.score}&#10;            &lt;/li&gt;&#10;          ))}&#10;        &lt;/ul&gt;&#10;      &lt;/div&gt;&#10;      {error &amp;&amp; &lt;div className=&quot;game-error&quot;&gt;{error}&lt;/div&gt;}&#10;      {phase === 'storytelling' &amp;&amp; isStoryteller &amp;&amp; (&#10;        &lt;div&gt;&#10;          &lt;h3&gt;Du bist der Erzähler!&lt;/h3&gt;&#10;          &lt;input value={hint} onChange={e =&gt; setHint(e.target.value)} placeholder=&quot;Hinweis eingeben...&quot; /&gt;&#10;          &lt;input type=&quot;number&quot; value={selectedCard || ''} onChange={e =&gt; setSelectedCard(Number(e.target.value))} placeholder=&quot;Karten-ID wählen&quot; /&gt;&#10;          &lt;button onClick={handleGiveHint}&gt;Hinweis geben&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      {phase === 'selectCards' &amp;&amp; !isStoryteller &amp;&amp; (&#10;        &lt;div&gt;&#10;          &lt;h3&gt;Karte auswählen&lt;/h3&gt;&#10;          &lt;input type=&quot;number&quot; value={selectedCard || ''} onChange={e =&gt; setSelectedCard(Number(e.target.value))} placeholder=&quot;Karten-ID wählen&quot; /&gt;&#10;          &lt;button onClick={handleChooseCard}&gt;Karte wählen&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      {phase === 'voting' &amp;&amp; (&#10;        &lt;div&gt;&#10;          &lt;h3&gt;Abstimmen&lt;/h3&gt;&#10;          &lt;input type=&quot;number&quot; value={voteCard || ''} onChange={e =&gt; setVoteCard(Number(e.target.value))} placeholder=&quot;Karten-ID wählen&quot; /&gt;&#10;          &lt;button onClick={handleVote}&gt;Abstimmen&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      {phase === 'reveal' &amp;&amp; (&#10;        &lt;div&gt;&#10;          &lt;h3&gt;Ergebnis&lt;/h3&gt;&#10;          &lt;button onClick={handleNextRound}&gt;Nächste Runde&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      &lt;button onClick={onLeaveGame}&gt;Spiel verlassen&lt;/button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Game;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#10;import { getGameState, giveHint, chooseCard, vote, nextRound } from './api';&#10;import './GameStyle.css';&#10;import audioManager from './utils/AudioManager';&#10;&#10;const SOUND_PATH = 'frontend/sounds/';&#10;&#10;function Game({ gameId, playerName, onLeaveGame, volume, setVolume }) {&#10;  const [gameState, setGameState] = useState(null);&#10;  const [hint, setHint] = useState('');&#10;  const [selectedCard, setSelectedCard] = useState(null);&#10;  const [voteCard, setVoteCard] = useState(null);&#10;  const [error, setError] = useState('');&#10;  const [lastPhase, setLastPhase] = useState(null);&#10;&#10;  useEffect(() =&gt; {&#10;    const interval = setInterval(() =&gt; {&#10;      getGameState(gameId).then(setGameState);&#10;    }, 1500);&#10;    return () =&gt; clearInterval(interval);&#10;  }, [gameId]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (gameState) {&#10;      // Phasenwechsel erkennen&#10;      if (lastPhase &amp;&amp; lastPhase !== gameState.phase) {&#10;        audioManager.playEffect(`${SOUND_PATH}phase-change.mp3`);&#10;      }&#10;      setLastPhase(gameState.phase);&#10;      // Storyteller-Sound nur für Erzähler in Storytelling-Phase&#10;      const isStoryteller = gameState.players.find(p =&gt; p.name === playerName)?.isStoryteller;&#10;      if (gameState.phase === 'storytelling' &amp;&amp; isStoryteller) {&#10;        audioManager.playEffect(`${SOUND_PATH}storyteller.mp3`);&#10;      }&#10;    }&#10;  }, [gameState]);&#10;&#10;  if (!gameState) return &lt;div&gt;Spiel wird geladen...&lt;/div&gt;;&#10;&#10;  const phase = gameState.phase;&#10;  const isStoryteller = gameState.players.find(p =&gt; p.name === playerName)?.isStoryteller;&#10;&#10;  const handleGiveHint = async () =&gt; {&#10;    if (!hint || !selectedCard) {&#10;      setError('Bitte Hinweis und Karte wählen!');&#10;      return;&#10;    }&#10;    await giveHint(gameId, playerName, selectedCard, hint);&#10;    setHint('');&#10;    setSelectedCard(null);&#10;  };&#10;&#10;  const handleChooseCard = async () =&gt; {&#10;    if (!selectedCard) {&#10;      setError('Bitte eine Karte wählen!');&#10;      return;&#10;    }&#10;    await chooseCard(gameId, playerName, selectedCard);&#10;    setSelectedCard(null);&#10;  };&#10;&#10;  const handleVote = async () =&gt; {&#10;    if (!voteCard) {&#10;      setError('Bitte eine Karte zum Abstimmen wählen!');&#10;      return;&#10;    }&#10;    await vote(gameId, playerName, voteCard);&#10;    setVoteCard(null);&#10;  };&#10;&#10;  const handleNextRound = async () =&gt; {&#10;    await nextRound(gameId);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;game-container&quot;&gt;&#10;      &lt;h2&gt;Spiel: {gameId}&lt;/h2&gt;&#10;      &lt;div&gt;Phase: {phase}&lt;/div&gt;&#10;      &lt;div&gt;Spieler:&#10;        &lt;ul&gt;&#10;          {gameState.players.map(p =&gt; (&#10;            &lt;li key={p.id} style={{ fontWeight: p.name === playerName ? 'bold' : 'normal' }}&gt;&#10;              {p.name} {p.isStoryteller ? '(Erzähler)' : ''} - Punkte: {p.score}&#10;            &lt;/li&gt;&#10;          ))}&#10;        &lt;/ul&gt;&#10;      &lt;/div&gt;&#10;      {error &amp;&amp; &lt;div className=&quot;game-error&quot;&gt;{error}&lt;/div&gt;}&#10;      {phase === 'storytelling' &amp;&amp; isStoryteller &amp;&amp; (&#10;        &lt;div&gt;&#10;          &lt;h3&gt;Du bist der Erzähler!&lt;/h3&gt;&#10;          &lt;input value={hint} onChange={e =&gt; setHint(e.target.value)} placeholder=&quot;Hinweis eingeben...&quot; /&gt;&#10;          &lt;input type=&quot;number&quot; value={selectedCard || ''} onChange={e =&gt; setSelectedCard(Number(e.target.value))} placeholder=&quot;Karten-ID wählen&quot; /&gt;&#10;          &lt;button onClick={handleGiveHint}&gt;Hinweis geben&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      {phase === 'selectCards' &amp;&amp; !isStoryteller &amp;&amp; (&#10;        &lt;div&gt;&#10;          &lt;h3&gt;Karte auswählen&lt;/h3&gt;&#10;          &lt;input type=&quot;number&quot; value={selectedCard || ''} onChange={e =&gt; setSelectedCard(Number(e.target.value))} placeholder=&quot;Karten-ID wählen&quot; /&gt;&#10;          &lt;button onClick={handleChooseCard}&gt;Karte wählen&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      {phase === 'voting' &amp;&amp; (&#10;        &lt;div&gt;&#10;          &lt;h3&gt;Abstimmen&lt;/h3&gt;&#10;          &lt;input type=&quot;number&quot; value={voteCard || ''} onChange={e =&gt; setVoteCard(Number(e.target.value))} placeholder=&quot;Karten-ID wählen&quot; /&gt;&#10;          &lt;button onClick={handleVote}&gt;Abstimmen&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      {phase === 'reveal' &amp;&amp; (&#10;        &lt;div&gt;&#10;          &lt;h3&gt;Ergebnis&lt;/h3&gt;&#10;          &lt;button onClick={handleNextRound}&gt;Nächste Runde&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      &lt;button onClick={onLeaveGame}&gt;Spiel verlassen&lt;/button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Game;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/api.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/api.js" />
              <option name="originalContent" value="// API-Client für die Kommunikation mit dem PHP-Backend&#10;const API_URL = 'https://d-tischer.de/backend'; // Passe ggf. den Pfad an&#10;&#10;export async function createGame(playerName) {&#10;  const res = await fetch(`${API_URL}/Lobby.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ playerName })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function joinGame(gameId, playerName) {&#10;  const res = await fetch(`${API_URL}/Lobby.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, playerName })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function getGameState(gameId) {&#10;  const res = await fetch(`${API_URL}/Game.php?gameId=${gameId}`);&#10;  return res.json();&#10;}&#10;&#10;export async function giveHint(gameId, playerName, cardId, hint) {&#10;  const res = await fetch(`${API_URL}/Game.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, playerName, cardId, hint, action: 'giveHint' })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function chooseCard(gameId, playerName, cardId) {&#10;  const res = await fetch(`${API_URL}/Game.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, playerName, cardId, action: 'chooseCard' })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function vote(gameId, playerName, cardId) {&#10;  const res = await fetch(`${API_URL}/Game.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, playerName, cardId, action: 'vote' })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function nextRound(gameId) {&#10;  const res = await fetch(`${API_URL}/Game.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, action: 'nextRound' })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import config from './config.json';&#10;&#10;// API-Client für die Kommunikation mit dem PHP-Backend&#10;const API_URL = config.API_URL; // Passe ggf. den Pfad an&#10;&#10;export async function createGame(playerName) {&#10;  const res = await fetch(`${API_URL}/Lobby.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ playerName })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function joinGame(gameId, playerName) {&#10;  const res = await fetch(`${API_URL}/Lobby.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, playerName })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function getGameState(gameId) {&#10;  const res = await fetch(`${API_URL}/Game.php?gameId=${gameId}`);&#10;  return res.json();&#10;}&#10;&#10;export async function giveHint(gameId, playerName, cardId, hint) {&#10;  const res = await fetch(`${API_URL}/Game.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, playerName, cardId, hint, action: 'giveHint' })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function chooseCard(gameId, playerName, cardId) {&#10;  const res = await fetch(`${API_URL}/Game.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, playerName, cardId, action: 'chooseCard' })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function vote(gameId, playerName, cardId) {&#10;  const res = await fetch(`${API_URL}/Game.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, playerName, cardId, action: 'vote' })&#10;  });&#10;  return res.json();&#10;}&#10;&#10;export async function nextRound(gameId) {&#10;  const res = await fetch(`${API_URL}/Game.php`, {&#10;    method: 'POST',&#10;    headers: { 'Content-Type': 'application/json' },&#10;    body: JSON.stringify({ gameId, action: 'nextRound' })&#10;  });&#10;  return res.json();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/config.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/config.json" />
              <option name="updatedContent" value="{&#10;  &quot;API_URL&quot;: &quot;https://d-tischer.de/backend&quot;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/package.json" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;dont-pick-me-frontend&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;react&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.2.0&quot;,&#10;    &quot;react-scripts&quot;: &quot;^5.0.1&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;react-scripts start&quot;,&#10;    &quot;build&quot;: &quot;react-scripts build&quot;,&#10;    &quot;test&quot;: &quot;react-scripts test&quot;,&#10;    &quot;eject&quot;: &quot;react-scripts eject&quot;&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/public/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/public/index.html" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;de&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&#10;    &lt;meta name=&quot;theme-color&quot; content=&quot;#667eea&quot; /&gt;&#10;    &lt;title&gt;Don't Pick Me&lt;/title&gt;&#10;    &lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; /&gt;&#10;  &lt;/head&gt;&#10;  &lt;body&gt;&#10;    &lt;noscript&gt;Du musst JavaScript aktivieren, um diese App zu nutzen.&lt;/noscript&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/App.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/App.js" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import { createGame, joinGame, getGameState } from './api';&#10;import Lobby from '../Lobby';&#10;import Game from '../Game';&#10;import VolumeControl from './components/VolumeControl';&#10;import audioManager from '../utils/AudioManager';&#10;&#10;class ErrorBoundary extends React.Component {&#10;    constructor(props) {&#10;        super(props);&#10;        this.state = { hasError: false, error: null };&#10;    }&#10;    static getDerivedStateFromError(error) {&#10;        return { hasError: true, error };&#10;    }&#10;    componentDidCatch(error, errorInfo) {&#10;        console.error('ErrorBoundary caught:', error, errorInfo);&#10;    }&#10;    render() {&#10;        if (this.state.hasError) {&#10;            return (&#10;                &lt;div style={{ color: 'red', padding: '40px', background: '#fff' }}&gt;&#10;                    &lt;h2&gt;Ein Fehler ist aufgetreten!&lt;/h2&gt;&#10;                    &lt;pre&gt;{this.state.error &amp;&amp; this.state.error.toString()}&lt;/pre&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;        return this.props.children;&#10;    }&#10;}&#10;&#10;function App() {&#10;    const [gameId, setGameId] = useState('');&#10;    const [playerName, setPlayerName] = useState('');&#10;    const [isInGame, setIsInGame] = useState(false);&#10;    const [players, setPlayers] = useState([]);&#10;    const [error, setError] = useState('');&#10;    const [volume, setVolume] = useState(0.3); // Reduzierte Standard-Lautstärke&#10;&#10;    // Initialisiere AudioManager beim App-Start&#10;    useEffect(() =&gt; {&#10;        audioManager.setVolume(volume);&#10;&#10;        // Auto-start Lobby-Musik mit reduzierter Lautstärke&#10;        audioManager.playTrack('lobby.mp3', true, 2000);&#10;&#10;        // Cleanup bei App-Beendigung&#10;        return () =&gt; {&#10;            audioManager.stopTrack(500);&#10;        };&#10;    }, []);&#10;&#10;    // Volume änderungen an AudioManager weiterleiten&#10;    useEffect(() =&gt; {&#10;        audioManager.setVolume(volume);&#10;    }, [volume]);&#10;&#10;    useEffect(() =&gt; {&#10;        if (gameId) {&#10;            getGameState(gameId).then(state =&gt; {&#10;                setPlayers(state.players || []);&#10;            });&#10;        }&#10;    }, [gameId, isInGame]);&#10;&#10;    const handleJoin = async () =&gt; {&#10;        if (!gameId || !playerName) {&#10;            setError('Bitte Raum-ID und Namen eingeben!');&#10;            return;&#10;        }&#10;        try {&#10;            const res = await joinGame(gameId, playerName);&#10;            if (res.success) {&#10;                setIsInGame(true);&#10;                setError('');&#10;            } else {&#10;                setError(res.message || 'Beitritt fehlgeschlagen');&#10;            }&#10;        } catch (e) {&#10;            setError('Serverfehler');&#10;        }&#10;    };&#10;&#10;    const handleStart = async () =&gt; {&#10;        if (players.length &lt; 3) {&#10;            setError('Mindestens 3 Spieler benötigt!');&#10;            return;&#10;        }&#10;        try {&#10;            const res = await createGame(playerName);&#10;            if (res.success) {&#10;                setIsInGame(true);&#10;                setError('');&#10;            } else {&#10;                setError(res.message || 'Start fehlgeschlagen');&#10;            }&#10;        } catch (e) {&#10;            setError('Serverfehler');&#10;        }&#10;    };&#10;&#10;    const handleLeaveGame = () =&gt; {&#10;        setIsInGame(false);&#10;        setGameId('');&#10;        setPlayers([]);&#10;        // Wechsel zurück zur Lobby-Musik&#10;        audioManager.playTrack('lobby.mp3', true, 1000);&#10;    };&#10;&#10;    const handleVolumeChange = (newVolume) =&gt; {&#10;        setVolume(newVolume);&#10;    };&#10;&#10;    return (&#10;        &lt;ErrorBoundary&gt;&#10;            &lt;div className=&quot;App&quot; style={{ position: 'relative' }}&gt;&#10;                {/* VolumeControl für die Startseite */}&#10;                {!isInGame &amp;&amp; &lt;VolumeControl volume={volume} onChange={handleVolumeChange} /&gt;}&#10;&#10;                &lt;div style={{&#10;                    minHeight: '100vh',&#10;                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',&#10;                    padding: '20px'&#10;                }}&gt;&#10;                    &lt;div style={{ maxWidth: '800px', margin: '0 auto' }}&gt;&#10;                        {/* App Header */}&#10;                        &lt;div style={{&#10;                            textAlign: 'center',&#10;                            marginBottom: '40px',&#10;                            background: 'rgba(255,255,255,0.1)',&#10;                            padding: '30px',&#10;                            borderRadius: '20px',&#10;                            backdropFilter: 'blur(10px)',&#10;                            color: 'white',&#10;                            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',&#10;                            position: 'relative'&#10;                        }}&gt;&#10;                            &lt;h1 style={{&#10;                                margin: '0 0 15px 0',&#10;                                fontSize: '42px',&#10;                                fontWeight: 'bold',&#10;                                textShadow: '3px 3px 6px rgba(0,0,0,0.3)',&#10;                                background: 'linear-gradient(45deg, #ffd700, #ffed4e)',&#10;                                WebkitBackgroundClip: 'text',&#10;                                WebkitTextFillColor: 'transparent',&#10;                                backgroundClip: 'text'&#10;                            }}&gt;&#10;                                 Don't Choose Me&#10;                            &lt;/h1&gt;&#10;                            &lt;p style={{&#10;                                margin: 0,&#10;                                fontSize: '18px',&#10;                                opacity: 0.9,&#10;                                fontWeight: '300'&#10;                            }}&gt;&#10;                                Das kreative Ratespiel für Freunde und Familie&#10;                            &lt;/p&gt;&#10;&#10;                            {/* Audio Indicator für Startseite */}&#10;                            {!isInGame &amp;&amp; (&#10;                                &lt;div style={{&#10;                                    position: 'absolute',&#10;                                    top: '15px',&#10;                                    right: '15px',&#10;                                    display: 'flex',&#10;                                    alignItems: 'center',&#10;                                    gap: '8px',&#10;                                    background: 'rgba(255,255,255,0.1)',&#10;                                    padding: '6px 12px',&#10;                                    borderRadius: '20px',&#10;                                    fontSize: '12px',&#10;                                    opacity: 0.7&#10;                                }}&gt;&#10;                                     Willkommensmusik&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Main Content */}&#10;                        &lt;div style={{&#10;                            background: 'rgba(255,255,255,0.1)',&#10;                            borderRadius: '20px',&#10;                            padding: '30px',&#10;                            backdropFilter: 'blur(10px)',&#10;                            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',&#10;                            border: '1px solid rgba(255,255,255,0.2)'&#10;                        }}&gt;&#10;                            {isInGame ? (&#10;                                &lt;Game&#10;                                    gameId={gameId}&#10;                                    playerName={playerName}&#10;                                    onLeaveGame={handleLeaveGame}&#10;                                    volume={volume}&#10;                                    setVolume={setVolume}&#10;                                /&gt;&#10;                            ) : (&#10;                                &lt;Lobby&#10;                                    players={players}&#10;                                    gameId={gameId}&#10;                                    error={error}&#10;                                    onJoin={handleJoin}&#10;                                    onStart={handleStart}&#10;                                    onLeave={handleLeaveGame}&#10;                                /&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Footer */}&#10;                        &lt;div style={{&#10;                            textAlign: 'center',&#10;                            marginTop: '30px',&#10;                            color: 'rgba(255,255,255,0.7)',&#10;                            fontSize: '14px'&#10;                        }}&gt;&#10;                            &lt;p style={{ margin: 0 }}&gt;&#10;                                 Ein Erzähler gibt einen Hinweis zu seiner Karte&lt;br/&gt;&#10;                                 Andere wählen passende Karten aus ihrer Hand&lt;br/&gt;&#10;                                ️ Alle raten, welche Karte vom Erzähler stammt&lt;br/&gt;&#10;                                 Erste Person mit 30 Punkten gewinnt!&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/ErrorBoundary&gt;&#10;    );&#10;}&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { createGame, joinGame, getGameState } from './api';&#10;import Lobby from './Lobby';&#10;import Game from './Game';&#10;import VolumeControl from './components/VolumeControl';&#10;import audioManager from '../utils/AudioManager';&#10;&#10;class ErrorBoundary extends React.Component {&#10;    constructor(props) {&#10;        super(props);&#10;        this.state = { hasError: false, error: null };&#10;    }&#10;    static getDerivedStateFromError(error) {&#10;        return { hasError: true, error };&#10;    }&#10;    componentDidCatch(error, errorInfo) {&#10;        console.error('ErrorBoundary caught:', error, errorInfo);&#10;    }&#10;    render() {&#10;        if (this.state.hasError) {&#10;            return (&#10;                &lt;div style={{ color: 'red', padding: '40px', background: '#fff' }}&gt;&#10;                    &lt;h2&gt;Ein Fehler ist aufgetreten!&lt;/h2&gt;&#10;                    &lt;pre&gt;{this.state.error &amp;&amp; this.state.error.toString()}&lt;/pre&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;        return this.props.children;&#10;    }&#10;}&#10;&#10;function App() {&#10;    const [gameId, setGameId] = useState('');&#10;    const [playerName, setPlayerName] = useState('');&#10;    const [isInGame, setIsInGame] = useState(false);&#10;    const [players, setPlayers] = useState([]);&#10;    const [error, setError] = useState('');&#10;    const [volume, setVolume] = useState(0.3); // Reduzierte Standard-Lautstärke&#10;&#10;    // Initialisiere AudioManager beim App-Start&#10;    useEffect(() =&gt; {&#10;        audioManager.setVolume(volume);&#10;&#10;        // Auto-start Lobby-Musik mit reduzierter Lautstärke&#10;        audioManager.playTrack('lobby.mp3', true, 2000);&#10;&#10;        // Cleanup bei App-Beendigung&#10;        return () =&gt; {&#10;            audioManager.stopTrack(500);&#10;        };&#10;    }, []);&#10;&#10;    // Volume änderungen an AudioManager weiterleiten&#10;    useEffect(() =&gt; {&#10;        audioManager.setVolume(volume);&#10;    }, [volume]);&#10;&#10;    useEffect(() =&gt; {&#10;        if (gameId) {&#10;            getGameState(gameId).then(state =&gt; {&#10;                setPlayers(state.players || []);&#10;            });&#10;        }&#10;    }, [gameId, isInGame]);&#10;&#10;    const handleJoin = async () =&gt; {&#10;        if (!gameId || !playerName) {&#10;            setError('Bitte Raum-ID und Namen eingeben!');&#10;            return;&#10;        }&#10;        try {&#10;            const res = await joinGame(gameId, playerName);&#10;            if (res.success) {&#10;                setIsInGame(true);&#10;                setError('');&#10;            } else {&#10;                setError(res.message || 'Beitritt fehlgeschlagen');&#10;            }&#10;        } catch (e) {&#10;            setError('Serverfehler');&#10;        }&#10;    };&#10;&#10;    const handleStart = async () =&gt; {&#10;        if (players.length &lt; 3) {&#10;            setError('Mindestens 3 Spieler benötigt!');&#10;            return;&#10;        }&#10;        try {&#10;            const res = await createGame(playerName);&#10;            if (res.success) {&#10;                setIsInGame(true);&#10;                setError('');&#10;            } else {&#10;                setError(res.message || 'Start fehlgeschlagen');&#10;            }&#10;        } catch (e) {&#10;            setError('Serverfehler');&#10;        }&#10;    };&#10;&#10;    const handleLeaveGame = () =&gt; {&#10;        setIsInGame(false);&#10;        setGameId('');&#10;        setPlayers([]);&#10;        // Wechsel zurück zur Lobby-Musik&#10;        audioManager.playTrack('lobby.mp3', true, 1000);&#10;    };&#10;&#10;    const handleVolumeChange = (newVolume) =&gt; {&#10;        setVolume(newVolume);&#10;    };&#10;&#10;    return (&#10;        &lt;ErrorBoundary&gt;&#10;            &lt;div className=&quot;App&quot; style={{ position: 'relative' }}&gt;&#10;                {/* VolumeControl für die Startseite */}&#10;                {!isInGame &amp;&amp; &lt;VolumeControl volume={volume} onChange={handleVolumeChange} /&gt;}&#10;&#10;                &lt;div style={{&#10;                    minHeight: '100vh',&#10;                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',&#10;                    padding: '20px'&#10;                }}&gt;&#10;                    &lt;div style={{ maxWidth: '800px', margin: '0 auto' }}&gt;&#10;                        {/* App Header */}&#10;                        &lt;div style={{&#10;                            textAlign: 'center',&#10;                            marginBottom: '40px',&#10;                            background: 'rgba(255,255,255,0.1)',&#10;                            padding: '30px',&#10;                            borderRadius: '20px',&#10;                            backdropFilter: 'blur(10px)',&#10;                            color: 'white',&#10;                            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',&#10;                            position: 'relative'&#10;                        }}&gt;&#10;                            &lt;h1 style={{&#10;                                margin: '0 0 15px 0',&#10;                                fontSize: '42px',&#10;                                fontWeight: 'bold',&#10;                                textShadow: '3px 3px 6px rgba(0,0,0,0.3)',&#10;                                background: 'linear-gradient(45deg, #ffd700, #ffed4e)',&#10;                                WebkitBackgroundClip: 'text',&#10;                                WebkitTextFillColor: 'transparent',&#10;                                backgroundClip: 'text'&#10;                            }}&gt;&#10;                                 Don't Choose Me&#10;                            &lt;/h1&gt;&#10;                            &lt;p style={{&#10;                                margin: 0,&#10;                                fontSize: '18px',&#10;                                opacity: 0.9,&#10;                                fontWeight: '300'&#10;                            }}&gt;&#10;                                Das kreative Ratespiel für Freunde und Familie&#10;                            &lt;/p&gt;&#10;&#10;                            {/* Audio Indicator für Startseite */}&#10;                            {!isInGame &amp;&amp; (&#10;                                &lt;div style={{&#10;                                    position: 'absolute',&#10;                                    top: '15px',&#10;                                    right: '15px',&#10;                                    display: 'flex',&#10;                                    alignItems: 'center',&#10;                                    gap: '8px',&#10;                                    background: 'rgba(255,255,255,0.1)',&#10;                                    padding: '6px 12px',&#10;                                    borderRadius: '20px',&#10;                                    fontSize: '12px',&#10;                                    opacity: 0.7&#10;                                }}&gt;&#10;                                     Willkommensmusik&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Main Content */}&#10;                        &lt;div style={{&#10;                            background: 'rgba(255,255,255,0.1)',&#10;                            borderRadius: '20px',&#10;                            padding: '30px',&#10;                            backdropFilter: 'blur(10px)',&#10;                            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',&#10;                            border: '1px solid rgba(255,255,255,0.2)'&#10;                        }}&gt;&#10;                            {isInGame ? (&#10;                                &lt;Game&#10;                                    gameId={gameId}&#10;                                    playerName={playerName}&#10;                                    onLeaveGame={handleLeaveGame}&#10;                                    volume={volume}&#10;                                    setVolume={setVolume}&#10;                                /&gt;&#10;                            ) : (&#10;                                &lt;Lobby&#10;                                    players={players}&#10;                                    gameId={gameId}&#10;                                    error={error}&#10;                                    onJoin={handleJoin}&#10;                                    onStart={handleStart}&#10;                                    onLeave={handleLeaveGame}&#10;                                /&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Footer */}&#10;                        &lt;div style={{&#10;                            textAlign: 'center',&#10;                            marginTop: '30px',&#10;                            color: 'rgba(255,255,255,0.7)',&#10;                            fontSize: '14px'&#10;                        }}&gt;&#10;                            &lt;p style={{ margin: 0 }}&gt;&#10;                                 Ein Erzähler gibt einen Hinweis zu seiner Karte&lt;br/&gt;&#10;                                 Andere wählen passende Karten aus ihrer Hand&lt;br/&gt;&#10;                                ️ Alle raten, welche Karte vom Erzähler stammt&lt;br/&gt;&#10;                                 Erste Person mit 30 Punkten gewinnt!&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/ErrorBoundary&gt;&#10;    );&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/index.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/index.js" />
              <option name="originalContent" value="import React from 'react';&#10;import ReactDOM from 'react-dom/client';&#10;import App from '../App';&#10;import './index.css';&#10;&#10;const root = ReactDOM.createRoot(document.getElementById('root'));&#10;root.render(&#10;  &lt;React.StrictMode&gt;&#10;    &lt;App /&gt;&#10;  &lt;/React.StrictMode&gt;&#10;);&#10;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import ReactDOM from 'react-dom/client';&#10;import App from './App';&#10;import './index.css';&#10;&#10;const root = ReactDOM.createRoot(document.getElementById('root'));&#10;root.render(&#10;  &lt;React.StrictMode&gt;&#10;    &lt;App /&gt;&#10;  &lt;/React.StrictMode&gt;&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/utils/AudioManager.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/utils/AudioManager.js" />
              <option name="updatedContent" value="// Einfacher AudioManager für das Abspielen von Sounds&#10;class AudioManager {&#10;  constructor() {&#10;    this.currentAudio = null;&#10;    this.volume = 0.3;&#10;  }&#10;&#10;  setVolume(vol) {&#10;    this.volume = vol;&#10;    if (this.currentAudio) {&#10;      this.currentAudio.volume = vol;&#10;    }&#10;  }&#10;&#10;  playTrack(src, loop = false, fadeIn = 0) {&#10;    if (this.currentAudio) {&#10;      this.currentAudio.pause();&#10;      this.currentAudio = null;&#10;    }&#10;    const audio = new window.Audio(src);&#10;    audio.loop = loop;&#10;    audio.volume = 0;&#10;    audio.play();&#10;    this.currentAudio = audio;&#10;    if (fadeIn &gt; 0) {&#10;      let v = 0;&#10;      const step = this.volume / (fadeIn / 50);&#10;      const fade = setInterval(() =&gt; {&#10;        v += step;&#10;        audio.volume = Math.min(v, this.volume);&#10;        if (v &gt;= this.volume) clearInterval(fade);&#10;      }, 50);&#10;    } else {&#10;      audio.volume = this.volume;&#10;    }&#10;  }&#10;&#10;  playEffect(src) {&#10;    const audio = new window.Audio(src);&#10;    audio.volume = this.volume;&#10;    audio.play();&#10;  }&#10;&#10;  stopTrack(fadeOut = 0) {&#10;    if (this.currentAudio) {&#10;      if (fadeOut &gt; 0) {&#10;        let v = this.currentAudio.volume;&#10;        const step = v / (fadeOut / 50);&#10;        const fade = setInterval(() =&gt; {&#10;          v -= step;&#10;          this.currentAudio.volume = Math.max(v, 0);&#10;          if (v &lt;= 0) {&#10;            clearInterval(fade);&#10;            this.currentAudio.pause();&#10;            this.currentAudio = null;&#10;          }&#10;        }, 50);&#10;      } else {&#10;        this.currentAudio.pause();&#10;        this.currentAudio = null;&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;const audioManager = new AudioManager();&#10;export default audioManager;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>