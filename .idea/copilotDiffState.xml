<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Card.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Card.js" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;/**&#10; * Card-Komponente für die Anzeige von Spielkarten mit interaktiven Features&#10; */&#10;function Card({ card, onClick, selected, style = {} }) {&#10;  // Basis- und ausgewählte Styles&#10;  const baseStyle = {&#10;    border: '2px solid rgba(255,255,255,0.3)',&#10;    borderRadius: '16px',&#10;    padding: '8px',&#10;    margin: '8px',&#10;    cursor: onClick ? 'pointer' : 'default',&#10;    background: 'rgba(255,255,255,0.95)',&#10;    transition: 'all 0.3s ease',&#10;    boxShadow: '0 8px 16px rgba(0,0,0,0.15)',&#10;    backdropFilter: 'blur(10px)',&#10;    ...style&#10;  };&#10;  const selectedStyle = {&#10;    border: '4px solid #007bff',&#10;    background: 'linear-gradient(135deg, #e3f2fd, #bbdefb)',&#10;    boxShadow: '0 12px 24px rgba(0,123,255,0.3)'&#10;  };&#10;&#10;  // MouseOver/MouseOut Handler&#10;  const handleMouseOver = (e) =&gt; {&#10;    if (onClick) {&#10;      e.currentTarget.style.transform = 'scale(1.08) translateY(-4px)';&#10;      e.currentTarget.style.boxShadow = '0 16px 32px rgba(0,0,0,0.25)';&#10;    }&#10;  };&#10;  const handleMouseOut = (e) =&gt; {&#10;    if (onClick) {&#10;      e.currentTarget.style.transform = selected ? 'scale(1.05)' : 'scale(1)';&#10;      e.currentTarget.style.boxShadow = selected&#10;        ? '0 12px 24px rgba(0,123,255,0.3)'&#10;        : '0 8px 16px rgba(0,0,0,0.15)';&#10;    }&#10;  };&#10;&#10;  // Bild-Styles&#10;  const imgStyle = {&#10;    width: '250px',&#10;    height: '200px',&#10;    objectFit: 'cover',&#10;    borderRadius: '12px',&#10;    display: 'block',&#10;    filter: selected ? 'brightness(1.1) contrast(1.1)' : 'brightness(1)',&#10;    transition: 'filter 0.3s ease'&#10;  };&#10;&#10;  return (&#10;    &lt;div&#10;      onClick={onClick}&#10;      style={selected ? { ...baseStyle, ...selectedStyle } : baseStyle}&#10;      onMouseOver={handleMouseOver}&#10;      onMouseOut={handleMouseOut}&#10;    &gt;&#10;      &lt;img&#10;        src={`/${card.image}`}&#10;        alt={card.title || `Card ${card.id}`}&#10;        style={imgStyle}&#10;        onError={(e) =&gt; {&#10;          // Fallback-Bild falls das Kartenbild nicht geladen werden kann&#10;          e.target.src = `https://placehold.co/250x200/cccccc/666666?text=Card+${card.id}`;&#10;        }}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Card;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Card.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Card.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;/**&#10; * Card-Klasse für eine Dixit-Karte&#10; */&#10;class Card {&#10;    public int $id;&#10;    public string $title;&#10;    public string $image;&#10;&#10;    public function __construct(int $id, string $title, string $image) {&#10;        $this-&gt;id = $id;&#10;        $this-&gt;title = $title;&#10;        $this-&gt;image = $image;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/CardSelectionPhase.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/CardSelectionPhase.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;&#10;/**&#10; * CardSelectionPhase-Klasse für die Dixit-Kartenauswahl-Phase&#10; */&#10;class CardSelectionPhase {&#10;    /** @var array&lt;int, Card&gt; */&#10;    private array $selectedCards = [];&#10;&#10;    /**&#10;     * Spieler wählt eine Karte aus seiner Hand aus&#10;     */&#10;    public function selectCard(Player $player, Card $card): void {&#10;        $this-&gt;selectedCards[$player-&gt;id] = $card;&#10;    }&#10;&#10;    /**&#10;     * Gibt alle ausgewählten Karten zurück&#10;     */&#10;    public function getSelectedCards(): array {&#10;        return $this-&gt;selectedCards;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Game.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Game.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;require_once 'StorytellingPhase.php';&#10;require_once 'CardSelectionPhase.php';&#10;require_once 'VotingPhase.php';&#10;require_once 'ScoringPhase.php';&#10;&#10;class Game {&#10;    public string $gameId;&#10;    /** @var Player[] */&#10;    public array $players = [];&#10;    public int $storytellerIndex = 0;&#10;    public string $phase = 'waiting';&#10;    public array $selectedCards = [];&#10;    public array $votes = [];&#10;    public ?string $hint = null;&#10;    public ?int $storytellerCard = null;&#10;    public ?string $winner = null;&#10;    public array $mixedCards = [];&#10;    public string $state = 'waiting';&#10;&#10;    public function __construct(string $gameId, array $players) {&#10;        $this-&gt;gameId = $gameId;&#10;        $this-&gt;players = $players;&#10;    }&#10;&#10;    public function getState(): array {&#10;        return [&#10;            'gameId' =&gt; $this-&gt;gameId,&#10;            'players' =&gt; $this-&gt;players,&#10;            'storytellerIndex' =&gt; $this-&gt;storytellerIndex,&#10;            'phase' =&gt; $this-&gt;phase,&#10;            'selectedCards' =&gt; $this-&gt;selectedCards,&#10;            'votes' =&gt; $this-&gt;votes,&#10;            'hint' =&gt; $this-&gt;hint,&#10;            'storytellerCard' =&gt; $this-&gt;storytellerCard,&#10;            'winner' =&gt; $this-&gt;winner,&#10;            'mixedCards' =&gt; $this-&gt;mixedCards,&#10;            'state' =&gt; $this-&gt;state&#10;        ];&#10;    }&#10;&#10;    public function startGame(): void {&#10;        $this-&gt;phase = 'storytelling';&#10;        $this-&gt;state = 'playing';&#10;        $this-&gt;storytellerIndex = 0;&#10;    }&#10;&#10;    public function giveHint(string $playerName, int $cardId, string $hint): bool {&#10;        $storyteller = $this-&gt;players[$this-&gt;storytellerIndex] ?? null;&#10;        if ($storyteller &amp;&amp; $storyteller-&gt;name === $playerName) {&#10;            $this-&gt;hint = $hint;&#10;            $this-&gt;storytellerCard = $cardId;&#10;            $this-&gt;phase = 'selectCards';&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public function chooseCard(string $playerName, int $cardId): bool {&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;name === $playerName) {&#10;                $this-&gt;selectedCards[] = [&#10;                    'playerId' =&gt; $player-&gt;id,&#10;                    'cardId' =&gt; $cardId&#10;                ];&#10;                break;&#10;            }&#10;        }&#10;        // Wenn alle Spieler (außer Erzähler) gewählt haben, nächste Phase&#10;        if (count($this-&gt;selectedCards) &gt;= count($this-&gt;players) - 1) {&#10;            $this-&gt;phase = 'voting';&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public function vote(string $playerName, int $cardId): bool {&#10;        foreach ($this-&gt;players as $player) {&#10;            if ($player-&gt;name === $playerName) {&#10;                // Spieler darf nicht für eigene Karte stimmen&#10;                $ownCard = array_filter($this-&gt;selectedCards, fn($sc) =&gt; $sc['playerId'] === $player-&gt;id &amp;&amp; $sc['cardId'] === $cardId);&#10;                if ($ownCard) return false;&#10;                $this-&gt;votes[] = [&#10;                    'playerId' =&gt; $player-&gt;id,&#10;                    'cardId' =&gt; $cardId&#10;                ];&#10;                break;&#10;            }&#10;        }&#10;        // Wenn alle Stimmen abgegeben, nächste Phase&#10;        if (count($this-&gt;votes) &gt;= count($this-&gt;players) - 1) {&#10;            $this-&gt;phase = 'reveal';&#10;        }&#10;        return true;&#10;    }&#10;&#10;    public function nextRound(): void {&#10;        // Punkte berechnen&#10;        $scoring = new ScoringPhase();&#10;        $scoring-&gt;calculateScores($this-&gt;players, $this-&gt;storytellerCard, array_column($this-&gt;votes, 'cardId'));&#10;        // Erzähler wechseln&#10;        $this-&gt;storytellerIndex = ($this-&gt;storytellerIndex + 1) % count($this-&gt;players);&#10;        // Reset für neue Runde&#10;        $this-&gt;phase = 'storytelling';&#10;        $this-&gt;selectedCards = [];&#10;        $this-&gt;votes = [];&#10;        $this-&gt;hint = null;&#10;        $this-&gt;storytellerCard = null;&#10;    }&#10;&#10;    public function restart(): void {&#10;        foreach ($this-&gt;players as $player) {&#10;            $player-&gt;score = 0;&#10;        }&#10;        $this-&gt;phase = 'waiting';&#10;        $this-&gt;state = 'waiting';&#10;        $this-&gt;selectedCards = [];&#10;        $this-&gt;votes = [];&#10;        $this-&gt;hint = null;&#10;        $this-&gt;storytellerCard = null;&#10;        $this-&gt;winner = null;&#10;        $this-&gt;storytellerIndex = 0;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lobby.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lobby.js" />
              <option name="updatedContent" value="import React from 'react';&#10;import './LobbyStyle.css';&#10;&#10;function Lobby({ players, gameId, error, onJoin, onStart, onLeave }) {&#10;  return (&#10;    &lt;div className=&quot;lobby-container&quot;&gt;&#10;      &lt;h2&gt; Raum: {gameId}&lt;/h2&gt;&#10;      &lt;div className=&quot;lobby-players&quot;&gt;&#10;        &lt;h3&gt; Spieler ({players.length})&lt;/h3&gt;&#10;        &lt;div style={{ display: 'grid', gap: '12px', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}&gt;&#10;          {players.map((player, idx) =&gt; (&#10;            &lt;div key={player.id} className=&quot;lobby-player-card&quot;&gt;&#10;              &lt;div style={{ fontSize: '24px', marginBottom: '8px' }}&gt;&#10;                {idx === 0 ? '' : ''}&#10;              &lt;/div&gt;&#10;              &lt;div style={{ fontWeight: 'bold', fontSize: '16px' }}&gt;{player.name}&lt;/div&gt;&#10;              {idx === 0 &amp;&amp; &lt;div style={{ color: '#FFD700', fontSize: '12px', marginTop: '4px', fontWeight: 'bold' }}&gt;Raumleiter&lt;/div&gt;}&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      {error &amp;&amp; &lt;div className=&quot;lobby-error&quot;&gt;⚠️ {error}&lt;/div&gt;}&#10;      &lt;button className=&quot;lobby-btn&quot; onClick={onJoin}&gt; Raum beitreten&lt;/button&gt;&#10;      &lt;button className=&quot;lobby-btn&quot; onClick={onStart} disabled={players.length &lt; 3}&gt; Spiel starten!&lt;/button&gt;&#10;      &lt;button className=&quot;lobby-btn&quot; onClick={onLeave}&gt; Verlassen&lt;/button&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default Lobby;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lobby.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lobby.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;&#10;/**&#10; * Lobby-Klasse für die Verwaltung der Spiel-Lobby&#10; */&#10;class Lobby {&#10;    private string $gameId;&#10;    /** @var Player[] */&#10;    private array $players = [];&#10;    private string $state = 'waiting'; // 'waiting' oder 'playing'&#10;&#10;    public function __construct(string $gameId) {&#10;        $this-&gt;gameId = $gameId;&#10;    }&#10;&#10;    /**&#10;     * Spieler tritt der Lobby bei&#10;     */&#10;    public function joinLobby(Player $player): bool {&#10;        foreach ($this-&gt;players as $p) {&#10;            if ($p-&gt;name === $player-&gt;name) {&#10;                return false; // Name schon vergeben&#10;            }&#10;        }&#10;        $this-&gt;players[] = $player;&#10;        return true;&#10;    }&#10;&#10;    /**&#10;     * Spieler verlässt die Lobby&#10;     */&#10;    public function leaveLobby(string $playerName): void {&#10;        $this-&gt;players = array_filter($this-&gt;players, fn($p) =&gt; $p-&gt;name !== $playerName);&#10;    }&#10;&#10;    /**&#10;     * Gibt den aktuellen Lobby-Status zurück&#10;     */&#10;    public function getState(): array {&#10;        return [&#10;            'gameId' =&gt; $this-&gt;gameId,&#10;            'players' =&gt; array_map(fn($p) =&gt; ['id' =&gt; $p-&gt;id, 'name' =&gt; $p-&gt;name], $this-&gt;players),&#10;            'state' =&gt; $this-&gt;state&#10;        ];&#10;    }&#10;&#10;    /**&#10;     * Startet das Spiel, wenn genug Spieler vorhanden sind&#10;     */&#10;    public function startGame(): bool {&#10;        if (count($this-&gt;players) &gt;= 3) {&#10;            $this-&gt;state = 'playing';&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/LobbyStyle.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/LobbyStyle.css" />
              <option name="updatedContent" value="&#10;.lobby-container {&#10;    background: rgba(255,255,255,0.1);&#10;    border-radius: 16px;&#10;    padding: 20px;&#10;    margin-bottom: 24px;&#10;    border: 1px solid rgba(255,255,255,0.2);&#10;    text-align: center;&#10;}&#10;&#10;.lobby-players {&#10;    background: rgba(255,255,255,0.1);&#10;    border-radius: 16px;&#10;    padding: 24px;&#10;    margin-bottom: 24px;&#10;    border: 1px solid rgba(255,255,255,0.2);&#10;}&#10;&#10;.lobby-player-card {&#10;    background: linear-gradient(135deg, rgba(255,255,255,0.2), rgba(255,255,255,0.1));&#10;    padding: 16px;&#10;    border-radius: 12px;&#10;    border: 1px solid rgba(255,255,255,0.3);&#10;    text-align: center;&#10;    backdrop-filter: blur(10px);&#10;}&#10;&#10;.lobby-btn {&#10;    padding: 16px 24px;&#10;    font-size: 18px;&#10;    font-weight: bold;&#10;    border-radius: 12px;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease;&#10;    border: none;&#10;    color: white;&#10;    background: linear-gradient(135deg, #00c6ff, #0072ff);&#10;    box-shadow: 0 6px 20px rgba(0,114,255,0.3);&#10;    margin: 8px;&#10;}&#10;&#10;.lobby-btn:disabled {&#10;    background: linear-gradient(135deg, #6c757d, #5a6268);&#10;    cursor: not-allowed;&#10;    box-shadow: 0 4px 12px rgba(108,117,125,0.3);&#10;}&#10;&#10;.lobby-error {&#10;    background: linear-gradient(135deg, #ff6b6b, #ee5a52);&#10;    color: white;&#10;    padding: 12px 20px;&#10;    border-radius: 12px;&#10;    margin-bottom: 20px;&#10;    text-align: center;&#10;    font-weight: bold;&#10;    box-shadow: 0 4px 12px rgba(255,107,107,0.3);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Player.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Player.js" />
              <option name="updatedContent" value="/**&#10; * Player-Klasse für einen Dixit-Spieler&#10; */&#10;class Player {&#10;  constructor({ id, name, score = 0, hand = [], isActive = false, isStoryteller = false }) {&#10;    this.id = id;&#10;    this.name = name;&#10;    this.score = score;&#10;    this.hand = hand; // Array von Kartenobjekten&#10;    this.isActive = isActive; // Ist der Spieler gerade am Zug?&#10;    this.isStoryteller = isStoryteller; // Ist der Spieler der aktuelle Storyteller?&#10;  }&#10;}&#10;&#10;export default Player;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Player.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Player.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Card.php';&#10;&#10;/**&#10; * Player-Klasse für einen Dixit-Spieler&#10; */&#10;class Player {&#10;    public int $id;&#10;    public string $name;&#10;    public int $score;&#10;    /** @var Card[] */&#10;    public array $hand;&#10;    public bool $isActive;&#10;    public bool $isStoryteller;&#10;&#10;    public function __construct(&#10;        int $id,&#10;        string $name,&#10;        int $score = 0,&#10;        array $hand = [],&#10;        bool $isActive = false,&#10;        bool $isStoryteller = false&#10;    ) {&#10;        $this-&gt;id = $id;&#10;        $this-&gt;name = $name;&#10;        $this-&gt;score = $score;&#10;        $this-&gt;hand = $hand;&#10;        $this-&gt;isActive = $isActive;&#10;        $this-&gt;isStoryteller = $isStoryteller;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ScoringPhase.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ScoringPhase.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;&#10;/**&#10; * ScoringPhase-Klasse für die Dixit-Auswertungsphase&#10; */&#10;class ScoringPhase {&#10;    /**&#10;     * Berechnet und vergibt Punkte an die Spieler&#10;     * @param Player[] $players&#10;     * @param int $storytellerCardId&#10;     * @param array&lt;int, int&gt; $votes&#10;     */&#10;    public function calculateScores(array $players, int $storytellerCardId, array $votes): void {&#10;        // Beispielhafte Punktevergabe nach Dixit-Regeln&#10;        $storytellerFound = false;&#10;        $voteCounts = array_count_values($votes);&#10;&#10;        foreach ($players as $player) {&#10;            if (isset($votes[$player-&gt;id]) &amp;&amp; $votes[$player-&gt;id] === $storytellerCardId) {&#10;                $player-&gt;score += 3;&#10;                $storytellerFound = true;&#10;            }&#10;        }&#10;&#10;        // Storyteller bekommt Punkte, wenn nicht alle oder keiner richtig gewählt hat&#10;        if ($storytellerFound &amp;&amp; count($voteCounts) &gt; 1) {&#10;            foreach ($players as $player) {&#10;                if (isset($votes[$player-&gt;id]) &amp;&amp; $votes[$player-&gt;id] !== $storytellerCardId) {&#10;                    // Bonuspunkte für Spieler, deren Karte gewählt wurde&#10;                    $player-&gt;score += $voteCounts[$votes[$player-&gt;id]] ?? 0;&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/StorytellingPhase.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StorytellingPhase.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;&#10;/**&#10; * StorytellingPhase-Klasse für die Dixit-Storytelling-Phase&#10; */&#10;class StorytellingPhase {&#10;    private Player $storyteller;&#10;    private Card $chosenCard;&#10;    private string $hint;&#10;&#10;    public function __construct(Player $storyteller) {&#10;        $this-&gt;storyteller = $storyteller;&#10;    }&#10;&#10;    public function start(string $hint, Card $card) {&#10;        $this-&gt;hint = $hint;&#10;        $this-&gt;chosenCard = $card;&#10;        $this-&gt;storyteller-&gt;isStoryteller = true;&#10;    }&#10;&#10;    public function getHint(): string {&#10;        return $this-&gt;hint;&#10;    }&#10;&#10;    public function getChosenCard(): Card {&#10;        return $this-&gt;chosenCard;&#10;    }&#10;&#10;    public function getStoryteller(): Player {&#10;        return $this-&gt;storyteller;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/VotingPhase.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/VotingPhase.php" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;require_once 'Player.php';&#10;require_once 'Card.php';&#10;&#10;/**&#10; * VotingPhase-Klasse für die Dixit-Abstimmungsphase&#10; */&#10;class VotingPhase {&#10;    /** @var array&lt;int, int&gt; */&#10;    private array $votes = [];&#10;&#10;    /**&#10;     * Spieler stimmt für eine Karte ab&#10;     */&#10;    public function vote(Player $player, int $cardId): void {&#10;        $this-&gt;votes[$player-&gt;id] = $cardId;&#10;    }&#10;&#10;    /**&#10;     * Gibt alle Stimmen zurück&#10;     */&#10;    public function getVotes(): array {&#10;        return $this-&gt;votes;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/.htaccess">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/.htaccess" />
              <option name="originalContent" value="# CORS und PHP-API für Backend&#10;&lt;IfModule mod_headers.c&gt;&#10;    Header set Access-Control-Allow-Origin &quot;*&quot;&#10;    Header set Access-Control-Allow-Methods &quot;GET,POST,OPTIONS&quot;&#10;    Header set Access-Control-Allow-Headers &quot;Content-Type&quot;&#10;&lt;/IfModule&gt;&#10;&#10;RewriteEngine On&#10;&#10;# OPTIONS-Preflight-Anfragen direkt beantworten&#10;RewriteCond %{REQUEST_METHOD} OPTIONS&#10;RewriteRule ^.*$ - [R=200,L]&#10;&#10;# API-Endpunkte umleiten, aber nur wenn keine Datei/Verzeichnis existiert&#10;RewriteCond %{REQUEST_FILENAME} !-f&#10;RewriteCond %{REQUEST_FILENAME} !-d&#10;RewriteRule ^api/$ index.php [L]&#10;" />
              <option name="updatedContent" value="# CORS und PHP-API für Backend&#10;&lt;IfModule mod_headers.c&gt;&#10;    Header set Access-Control-Allow-Origin &quot;*&quot;&#10;    Header set Access-Control-Allow-Methods &quot;GET,POST,OPTIONS&quot;&#10;    Header set Access-Control-Allow-Headers &quot;Content-Type&quot;&#10;&lt;/IfModule&gt;&#10;&#10;# PHP-Fehler nicht als HTML anzeigen&#10;php_flag display_errors off&#10;php_flag log_errors on&#10;&#10;RewriteEngine On&#10;&#10;# OPTIONS-Preflight-Anfragen direkt beantworten&#10;RewriteCond %{REQUEST_METHOD} OPTIONS&#10;RewriteRule ^.*$ - [R=200,L]&#10;&#10;# API-Endpunkte umleiten, aber nur wenn keine Datei/Verzeichnis existiert&#10;RewriteCond %{REQUEST_FILENAME} !-f&#10;RewriteCond %{REQUEST_FILENAME} !-d&#10;RewriteRule ^api/$ index.php [L]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/Lobby.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/Lobby.php" />
              <option name="originalContent" value="&lt;?php&#10;// CORS-Header für alle Anfragen setzen&#10;header('Access-Control-Allow-Origin: *');&#10;header('Access-Control-Allow-Methods: POST, GET, OPTIONS');&#10;header('Access-Control-Allow-Headers: Content-Type, Authorization');&#10;header('Content-Type: application/json');&#10;&#10;// OPTIONS-Preflight-Anfragen behandeln&#10;if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {&#10;    http_response_code(200);&#10;    exit();&#10;}&#10;&#10;// Error Reporting für Debugging&#10;error_reporting(E_ALL);&#10;ini_set('display_errors', 1);&#10;&#10;try {&#10;    require_once 'Player.php';&#10;    require_once 'GameManager.php';&#10;&#10;    $gameManager = new GameManager();&#10;&#10;    if ($_SERVER['REQUEST_METHOD'] === 'POST') {&#10;        $jsonData = file_get_contents('php://input');&#10;        $data = json_decode($jsonData, true);&#10;&#10;        if (!$data) {&#10;            echo json_encode(['success' =&gt; false, 'message' =&gt; 'Ungültige JSON-Daten']);&#10;            exit;&#10;        }&#10;&#10;        if (!isset($data['playerName'])) {&#10;            echo json_encode(['success' =&gt; false, 'message' =&gt; 'Spielername fehlt']);&#10;            exit;&#10;        }&#10;&#10;        $playerName = $data['playerName'];&#10;&#10;        if (isset($data['gameId'])) {&#10;            // Spiel beitreten&#10;            $gameId = $data['gameId'];&#10;            $result = $gameManager-&gt;joinGame($gameId, $playerName);&#10;        } else {&#10;            // Neues Spiel erstellen&#10;            $result = $gameManager-&gt;createGame($playerName);&#10;        }&#10;&#10;        echo json_encode($result);&#10;    } else {&#10;        echo json_encode(['success' =&gt; false, 'message' =&gt; 'Nur POST-Anfragen unterstützt']);&#10;    }&#10;&#10;} catch (Exception $e) {&#10;    echo json_encode(['success' =&gt; false, 'message' =&gt; 'Server-Fehler: ' . $e-&gt;getMessage()]);&#10;}&#10;?&gt;&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;// CORS-Header für alle Anfragen setzen&#10;header('Access-Control-Allow-Origin: *');&#10;header('Access-Control-Allow-Methods: POST, GET, OPTIONS');&#10;header('Access-Control-Allow-Headers: Content-Type, Authorization');&#10;header('Content-Type: application/json');&#10;&#10;// OPTIONS-Preflight-Anfragen behandeln&#10;if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {&#10;    http_response_code(200);&#10;    exit();&#10;}&#10;&#10;// Error Reporting für Debugging&#10;error_reporting(E_ALL);&#10;ini_set('display_errors', 1);&#10;&#10;try {&#10;    // Prüfen ob Dateien existieren&#10;    if (!file_exists('Player.php')) {&#10;        throw new Exception('Player.php nicht gefunden');&#10;    }&#10;    if (!file_exists('GameManager.php')) {&#10;        throw new Exception('GameManager.php nicht gefunden');&#10;    }&#10;&#10;    require_once 'Player.php';&#10;    require_once 'GameManager.php';&#10;&#10;    // Prüfen ob Klasse existiert&#10;    if (!class_exists('GameManager')) {&#10;        throw new Exception('GameManager-Klasse nicht gefunden');&#10;    }&#10;&#10;    $gameManager = new GameManager();&#10;&#10;    if ($_SERVER['REQUEST_METHOD'] === 'POST') {&#10;        $jsonData = file_get_contents('php://input');&#10;        &#10;        if ($jsonData === false) {&#10;            throw new Exception('Konnte Request-Body nicht lesen');&#10;        }&#10;&#10;        $data = json_decode($jsonData, true);&#10;&#10;        if (json_last_error() !== JSON_ERROR_NONE) {&#10;            throw new Exception('JSON-Parsing-Fehler: ' . json_last_error_msg());&#10;        }&#10;&#10;        if (!$data) {&#10;            throw new Exception('Keine JSON-Daten empfangen');&#10;        }&#10;&#10;        if (!isset($data['playerName'])) {&#10;            throw new Exception('Spielername fehlt in den Daten');&#10;        }&#10;&#10;        $playerName = $data['playerName'];&#10;&#10;        if (isset($data['gameId'])) {&#10;            // Spiel beitreten&#10;            $gameId = $data['gameId'];&#10;            $result = $gameManager-&gt;joinGame($gameId, $playerName);&#10;        } else {&#10;            // Neues Spiel erstellen&#10;            $result = $gameManager-&gt;createGame($playerName);&#10;        }&#10;&#10;        echo json_encode($result);&#10;    } else {&#10;        echo json_encode(['success' =&gt; false, 'message' =&gt; 'Nur POST-Anfragen unterstützt']);&#10;    }&#10;&#10;} catch (Error $e) {&#10;    error_log('PHP Error in Lobby.php: ' . $e-&gt;getMessage());&#10;    echo json_encode(['success' =&gt; false, 'message' =&gt; 'PHP-Fehler: ' . $e-&gt;getMessage()]);&#10;} catch (Exception $e) {&#10;    error_log('Exception in Lobby.php: ' . $e-&gt;getMessage());&#10;    echo json_encode(['success' =&gt; false, 'message' =&gt; 'Server-Fehler: ' . $e-&gt;getMessage()]);&#10;} catch (Throwable $e) {&#10;    error_log('Throwable in Lobby.php: ' . $e-&gt;getMessage());&#10;    echo json_encode(['success' =&gt; false, 'message' =&gt; 'Unerwarteter Fehler: ' . $e-&gt;getMessage()]);&#10;}&#10;?&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/.htaccess">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/.htaccess" />
              <option name="originalContent" value="# React SPA Routing&#10;RewriteEngine On&#10;RewriteBase /frontend/&#10;RewriteCond %{REQUEST_FILENAME} !-f&#10;RewriteCond %{REQUEST_FILENAME} !-d&#10;RewriteRule ^ index.html [L]&#10;&#10;&#10;" />
              <option name="updatedContent" value="# React SPA Routing&#13;&#10;RewriteEngine On&#13;&#10;RewriteBase /frontend/&#13;&#10;RewriteCond %{REQUEST_FILENAME} !-f&#13;&#10;RewriteCond %{REQUEST_FILENAME} !-d&#13;&#10;RewriteRule ^ index.html [L]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/api.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/api.js" />
              <option name="originalContent" value="import config from './config.json';&#10;&#10;// API-Client für die Kommunikation mit dem PHP-Backend&#10;const API_URL = config.API_URL; // Passe ggf. den Pfad an&#10;&#10;// Hilfsfunktion zum sicheren Parsen von JSON-Antworten&#10;async function parseJSONResponse(response) {&#10;  try {&#10;    // Prüfen, ob die Antwort erfolgreich war&#10;    if (!response.ok) {&#10;      throw new Error(`HTTP error! Status: ${response.status}`);&#10;    }&#10;&#10;    // Text der Antwort lesen&#10;    const text = await response.text();&#10;&#10;    // Wenn der Text leer ist, geben wir ein leeres Objekt zurück&#10;    if (!text || text.trim() === '') {&#10;      console.warn('Leere Antwort vom Server erhalten');&#10;      return { success: false, message: 'Leere Antwort vom Server' };&#10;    }&#10;&#10;    // Versuchen, den Text als JSON zu parsen&#10;    try {&#10;      return JSON.parse(text);&#10;    } catch (jsonError) {&#10;      console.error('JSON-Parsing-Fehler:', jsonError);&#10;      console.error('Erhaltener Text:', text);&#10;      throw new Error('Ungültiges JSON vom Server erhalten');&#10;    }&#10;  } catch (error) {&#10;    console.error('API-Anfragefehler:', error);&#10;    return { success: false, message: `API-Fehler: ${error.message}` };&#10;  }&#10;}&#10;&#10;export async function createGame(playerName) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Lobby.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ playerName })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Erstellen des Spiels:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function joinGame(gameId, playerName) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Lobby.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, playerName })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Beitreten des Spiels:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function getGameState(gameId) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php?gameId=${gameId}`);&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Abrufen des Spielstatus:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function giveHint(gameId, playerName, cardId, hint) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, playerName, cardId, hint, action: 'giveHint' })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Senden des Hinweises:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function chooseCard(gameId, playerName, cardId) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, playerName, cardId, action: 'chooseCard' })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Auswählen einer Karte:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function vote(gameId, playerName, cardId) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, playerName, cardId, action: 'vote' })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Abstimmen:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function nextRound(gameId) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, action: 'nextRound' })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Starten der nächsten Runde:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import config from './config.json';&#10;&#10;// API-Client für die Kommunikation mit dem PHP-Backend&#10;const API_URL = config.API_URL; // Passe ggf. den Pfad an&#10;&#10;// Hilfsfunktion zum sicheren Parsen von JSON-Antworten&#10;async function parseJSONResponse(response) {&#10;  try {&#10;    // Prüfen, ob die Antwort erfolgreich war&#10;    if (!response.ok) {&#10;      // Bei 500er Fehlern versuchen wir trotzdem, die Antwort zu lesen&#10;      if (response.status === 500) {&#10;        try {&#10;          const text = await response.text();&#10;          console.error('Server-Fehler (500):', text);&#10;          return { success: false, message: `Server-Fehler: ${text}` };&#10;        } catch {&#10;          return { success: false, message: 'Server-Fehler (500): Keine Details verfügbar' };&#10;        }&#10;      }&#10;      throw new Error(`HTTP error! Status: ${response.status}`);&#10;    }&#10;&#10;    // Text der Antwort lesen&#10;    const text = await response.text();&#10;&#10;    // Wenn der Text leer ist, geben wir ein leeres Objekt zurück&#10;    if (!text || text.trim() === '') {&#10;      console.warn('Leere Antwort vom Server erhalten');&#10;      return { success: false, message: 'Leere Antwort vom Server' };&#10;    }&#10;&#10;    // Versuchen, den Text als JSON zu parsen&#10;    try {&#10;      return JSON.parse(text);&#10;    } catch (jsonError) {&#10;      console.error('JSON-Parsing-Fehler:', jsonError);&#10;      console.error('Erhaltener Text:', text);&#10;      throw new Error('Ungültiges JSON vom Server erhalten');&#10;    }&#10;  } catch (error) {&#10;    console.error('API-Anfragefehler:', error);&#10;    return { success: false, message: `API-Fehler: ${error.message}` };&#10;  }&#10;}&#10;&#10;export async function createGame(playerName) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Lobby.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ playerName })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Erstellen des Spiels:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function joinGame(gameId, playerName) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Lobby.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, playerName })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Beitreten des Spiels:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function getGameState(gameId) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php?gameId=${gameId}`);&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Abrufen des Spielstatus:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function giveHint(gameId, playerName, cardId, hint) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, playerName, cardId, hint, action: 'giveHint' })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Senden des Hinweises:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function chooseCard(gameId, playerName, cardId) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, playerName, cardId, action: 'chooseCard' })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Auswählen einer Karte:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function vote(gameId, playerName, cardId) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, playerName, cardId, action: 'vote' })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Abstimmen:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}&#10;&#10;export async function nextRound(gameId) {&#10;  try {&#10;    const res = await fetch(`${API_URL}/Game_api.php`, {&#10;      method: 'POST',&#10;      headers: { 'Content-Type': 'application/json' },&#10;      body: JSON.stringify({ gameId, action: 'nextRound' })&#10;    });&#10;    return parseJSONResponse(res);&#10;  } catch (error) {&#10;    console.error('Fehler beim Starten der nächsten Runde:', error);&#10;    return { success: false, message: 'Verbindungsfehler: Bitte überprüfe deine Internetverbindung' };&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>